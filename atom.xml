<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ヾ旧时光</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-08T08:21:25.007Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WLJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NodeJs</title>
    <link href="http://yoursite.com/2017/02/08/node.js/"/>
    <id>http://yoursite.com/2017/02/08/node.js/</id>
    <published>2017-02-08T07:26:16.000Z</published>
    <updated>2017-02-08T08:21:25.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Node-js的介绍"><a href="#一、Node-js的介绍" class="headerlink" title="一、Node.js的介绍"></a>一、Node.js的介绍</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。<br>  我们可以使用以下命令来查看当前的 Node 版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v4.4.3</div><div class="line">第一个Node.js程序：Hello World！</div><div class="line">以下是我们的第一个Node.js程序：</div><div class="line">实例</div><div class="line"></div><div class="line">console.log(<span class="string">"Hello World"</span>);</div><div class="line">打开cmd，到文件的目录下通过node命令来执：</div><div class="line"></div><div class="line">node helloworld.js</div></pre></td></tr></table></figure>
<p>如果是在webstorm中运行，直接右键run就可以运行了，也可以在左下角下面有一个Terminal,打开后也就是打开cmd一样的，也可以输入命令运行。</p>
<h3 id="二、node的http模块"><a href="#二、node的http模块" class="headerlink" title="二、node的http模块"></a>二、node的http模块</h3><p>模块:把各种功能划分在模块中,通过模块编写相关代码<br>http模块:负责web服务器相关任务的模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 1、引入http模块</div><div class="line">var http = require(&apos;http&apos;);</div><div class="line">// 2、创建服务</div><div class="line">// 当服务受到客户端发来的http请求时,执行回调函数</div><div class="line">var server = http.createServer(function (req, res) &#123;</div><div class="line">/*</div><div class="line">* req参数:请求对象,从客户端发到服务器中的请求信息存放在这个对象中</div><div class="line">* res参数:响应对象,需要返回给客户端的信息要放在这个对象中</div><div class="line">*</div><div class="line">*/</div><div class="line">console.log(req.url);</div><div class="line">console.log(req.method);</div><div class="line">res.setHeader(&apos;content-type&apos;, &apos;text/html;charset=utf-8;&apos;)</div><div class="line">//index.html:welcome to index;</div><div class="line">//login.html:please input your user and pass</div><div class="line">if (req.url == &apos;/index.html&apos; || req.url == &apos;/&apos;) &#123;</div><div class="line">   res.write(&apos;welcome to index&apos;);</div><div class="line">&#125; else if (req.url == &apos;/login.html&apos;) &#123;</div><div class="line">   res.write(&apos;please input your user and pass&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">   res.write(&apos;404, not found&apos;);</div><div class="line">&#125;</div><div class="line">   res.end();</div><div class="line">&#125;);</div><div class="line">// 3、让服务监听某个端口</div><div class="line">server.listen(&apos;8888&apos;);</div></pre></td></tr></table></figure>
<h3 id="三、node的文件操作"><a href="#三、node的文件操作" class="headerlink" title="三、node的文件操作"></a>三、node的文件操作</h3><p>fs:专门负责所有的文件、目录操作的模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">// 读取文件</div><div class="line">/*</div><div class="line">* readFile():异步读取文件的方法。</div><div class="line">* readFile()的三个参数</div><div class="line">* 第一个参数:要读取的文件路径</div><div class="line">* 第二个参数:文件的编码格式</div><div class="line">* 第三个参数:读取成功后的回调函数,该函数两个参数:第一个是读取失败时</div><div class="line">* 的失败信息,第二个表示读取成功后的文件内容</div><div class="line">*</div><div class="line">*/  </div><div class="line">fs.readFile(&apos;./demo.txt&apos;, &apos;utf-8&apos;,function (err, data) &#123;</div><div class="line">if (!err) &#123;</div><div class="line">   console.log(data);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">var data = fs.readFileSync(&apos;./demo.txt&apos;);</div><div class="line">console.log(data.toString());</div><div class="line">//写入文件操作</div><div class="line">// a表示拼接的形式写入新内容,w以覆盖的形式写入新内容</div><div class="line">fs.writeFile(&apos;./hello.txt&apos;,&apos;一只乌鸦口渴了&apos;,&#123;flag: &apos;a&apos;&#125;, function (err) &#123;</div><div class="line">if (err) &#123;</div><div class="line">     console.log(err);</div><div class="line"> &#125; else &#123;</div><div class="line">     console.log(&apos;写入成功&apos;);</div><div class="line"> &#125;</div><div class="line">&#125;);</div><div class="line">fs.writeFileSync(&apos;./hello.txt&apos;,&apos;hello world&apos;,&#123;flag:&apos;w&apos;&#125;);</div><div class="line">利用node的文件读写操作,实现复制文件的功能</div><div class="line"></div><div class="line">1、同步读取demo.txt文件中的数据</div><div class="line">var data = fs.readFileSync(&apos;./demo.txt&apos;,&apos;utf-8&apos;);</div><div class="line"></div><div class="line">2、把读取出来的输入写到另一个新文件中</div><div class="line"></div><div class="line">fs.writeFileSync(&apos;./demo副本.txt&apos;, data, &#123;flag:&apos;w&apos;&#125;);</div><div class="line">fs.writeFileSync(&apos;./1副本.gif&apos;,fs.readFileSync(&apos;./1.gif&apos;),&#123;flag:&apos;w&apos;&#125;);</div></pre></td></tr></table></figure>
<h3 id="四、文件操作stream读写文件"><a href="#四、文件操作stream读写文件" class="headerlink" title="四、文件操作stream读写文件"></a>四、文件操作stream读写文件</h3><p>stream: 读写是分块读写,把一个文件切分为若干块,分别读写着若干块文<br>                件,大大减轻服务器对内存的要求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">// 创建文件读取流</div><div class="line">var rs = fs.createReadStream(&apos;./1.gif&apos;);</div><div class="line">// 创建文件写入流</div><div class="line">var ws = fs.createWriteStream(&apos;./2.gif&apos;);</div><div class="line">// 读取流在读取文件时,每次读64k的数据,每读64k,就会触发rs下的data事件,可以给这个事件绑定函数,通过函数参数获取到读取的数据</div><div class="line">   rs.on(&apos;data&apos;, function (chunk) &#123;</div><div class="line"> // 调用写入流ws的write方法,把每次读出的64k数据写进指定的文件中</div><div class="line"> // write方法的回调函数:当写入结束时,会触发执行</div><div class="line">   ws.write(chunk,function () &#123;</div><div class="line">        console.log(&apos;写入完毕&apos;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">//pipe():是读取流的方法,参数是要把数据写入的目的地(一般是写入流)。该方法会控制读取流的读取速度:每读64k数据后,交给写入流写入,当数据写入到磁盘后,再进行下一次读取。</div><div class="line">   rs.pipe(ws);</div></pre></td></tr></table></figure>
<h3 id="五、文件操作之目录操作"><a href="#五、文件操作之目录操作" class="headerlink" title="五、文件操作之目录操作"></a>五、文件操作之目录操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">// fs.mkdir():创建一个新路径</div><div class="line">// 第二个参数:mode,由四位数字组成:</div><div class="line">// 第一位固定写法:0;第二位:表示管理员权限;第三位:表示:组用户权限;第四位:表示其他用户权限。</div><div class="line">// 1:表示可执行</div><div class="line">// 2:表示可写</div><div class="line">// 4:表示可读</div><div class="line">// 我们通过叠加以上权限的数组,能够灵活设置文件夹的权限</div><div class="line">fs.mkdir(&apos;./directory&apos;, 0777, function (err) &#123;</div><div class="line">         if (err) &#123;</div><div class="line">             console.log(err);</div><div class="line">         &#125; else  &#123;</div><div class="line">             console.log(&apos;创建成功&apos;);</div><div class="line">         &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 判断目录是否已经存在</div><div class="line">// fs.exists():两个参数,第一个参数:表示要判断的目录路径;第二个参数:表示判断结果的回调函数,该函数有一个布尔的参数,用来标示该目录是否存在</div><div class="line">fs.exists(&apos;./directory&apos;, function (bol) &#123;</div><div class="line">          console.log(bol);</div><div class="line">&#125;);</div><div class="line">// 查看文件或目录的详情</div><div class="line">fs.stat(&apos;./directory&apos;, function (err, stats) &#123;</div><div class="line">   if (err) &#123;</div><div class="line">     console.log(err);</div><div class="line">   &#125; else &#123;</div><div class="line">     console.log(stats);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 把文件或目录由相对路径转换为绝对路径</div><div class="line">fs.realpath(&apos;./1.gif&apos;,function (err, path) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">     console.log(err);</div><div class="line">  &#125; else &#123;</div><div class="line">     console.log(path);</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">// 给文件重命名</div><div class="line">fs.rename(&apos;./demo.txt&apos;,&apos;./newDemo.txt&apos;, function (err) &#123;</div><div class="line">   if (err) &#123;</div><div class="line">       console.log(err);</div><div class="line">   &#125; else &#123;</div><div class="line">             console.log(&apos;改名成功&apos;);</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="六、http-js"><a href="#六、http-js" class="headerlink" title="六、http.js"></a>六、http.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">var url = require(&apos;url&apos;);</div><div class="line">var server = http.createServer(function (req, res) &#123;</div><div class="line">var urlStr = req.url;</div><div class="line">// 参数放true,可以把请求参数转换为对象模式</div><div class="line">  //pathname是接口</div><div class="line">    //query是指请求参数</div><div class="line">var urlObj = url.parse(urlStr,true);</div><div class="line">if (urlObj.pathname == &apos;/&apos;) &#123;</div><div class="line">    var rs = fs.createReadStream(&apos;./login.html&apos;);</div><div class="line">    rs.pipe(res);</div><div class="line">&#125; else if (urlObj.pathname == &apos;/msg&apos;) &#123;</div><div class="line">    console.log(urlObj.query);</div><div class="line">    if (urlObj.query.user == &apos;admin&apos; &amp;&amp;</div><div class="line">        urlObj.query.pass == &apos;123&apos;) &#123;</div><div class="line">        res.write(&apos;&#123;err:1,msg:&quot;成功&quot;&#125;&apos;);//请求链接一直没有</div><div class="line">             断开</div><div class="line">        res.end();</div><div class="line">    &#125;</div><div class="line">&#125;&#125;);</div><div class="line">server.listen(&apos;8888&apos;);</div></pre></td></tr></table></figure>
<h3 id="七、http模块接受get请求数据"><a href="#七、http模块接受get请求数据" class="headerlink" title="七、http模块接受get请求数据"></a>七、http模块接受get请求数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var http = require(&quot;http&quot;);  </div><div class="line">var fs = require(&quot;fs&quot;);  </div><div class="line">var url = require(&quot;url&quot;);//专门用来处理url的  </div><div class="line">var server = http.createServer(function (req,res) &#123;  </div><div class="line">    res.setHeader(&apos;content-type&apos;, &quot;text/html;charset=utf-8;&quot;);  </div><div class="line">    var urlstr = req.url;  </div><div class="line">    var urlobj =url.parse(urlstr,true);//为了分离接口和参数，把url转换成对象  </div><div class="line">    if(urlobj.pathname ==&apos;./login.html&apos;||urlobj.pathname ==&quot;/&quot;)&#123;  </div><div class="line">       var rs = fs.createReadStream(&apos;./login.html&apos;);</div><div class="line">        rs.pipe(res);</div><div class="line">    &#125;else if(urlobj.pathname == &quot;/login&quot;)&#123;</div><div class="line">        if(urlobj.query.user==&apos;wlj&apos;&amp;&amp;urlobj.query.pass==&apos;123&apos;)&#123;</div><div class="line">            res.end(&apos;&#123;&quot;err&quot;:1,&quot;msg&quot;:&quot;登录成功&quot;&#125;&apos;);</div><div class="line">        &#125;else&#123;</div><div class="line">            res.end(&apos;&#123;&quot;err&quot;:0,&quot;msg&quot;:&quot;登录失败&quot;&#125;&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"> server.listen(8100, function () &#123;</div><div class="line"> console.log(&quot;服务器已经启动&quot;);</div></pre></td></tr></table></figure>
<h3 id="八、http模块接受post请求数据"><a href="#八、http模块接受post请求数据" class="headerlink" title="八、http模块接受post请求数据"></a>八、http模块接受post请求数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">var http = require(&quot;http&quot;);</div><div class="line">var fs = require(&quot;fs&quot;);</div><div class="line">var url = require(&quot;url&quot;);</div><div class="line">//专门用来处理url的,上面三个框架是系统自带的</div><div class="line">var qs = require(&quot;querystring&quot;);</div><div class="line">//自己引入框架就是在工程目录下用npm install querystring;</div><div class="line">//自己引入的一个框架，可以把post请求获取的字符串参数转换为对象</div><div class="line">//把前端不同的请求，发送不同的页面，叫做路由</div><div class="line">var server = http.createServer(function (req,res) &#123;</div><div class="line">    res.setHeader(&apos;content-type&apos;, &quot;text/html;charset=utf-8;&quot;);</div><div class="line">    var urlobj = url.parse(req.url,true);</div><div class="line">    if(urlobj.pathname ==&apos;./login.html&apos;||urlobj.pathname ==&quot;/&quot;)&#123;</div><div class="line">        var rs = fs.createReadStream(&apos;./login.html&apos;);</div><div class="line">        rs.pipe(res);</div><div class="line">    &#125;else if(urlobj.pathname == &quot;/login&quot;)&#123;</div><div class="line">        req.on(&quot;data&quot;, function (chunk) &#123;</div><div class="line">            //req本身是一个读取流，res是一个写入流</div><div class="line">            var str = chunk.toString();</div><div class="line">            var obj = qs.parse(str);</div><div class="line">            //console.log(obj);</div><div class="line">            if(obj.user == &quot;wlj&quot;&amp;&amp;obj.pass == &quot;123&quot;)&#123;</div><div class="line">                res.end(&apos;&#123;&quot;err&quot;:1,&quot;msg&quot;:&quot;success&quot;&#125;&apos;)</div><div class="line">            &#125;else&#123;</div><div class="line">                res.end(&apos;&#123;&quot;err&quot;:0,&quot;msg&quot;:&quot;err&quot;&#125;&apos;)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">    server.listen(8200, function () &#123;</div><div class="line">        console.log(&quot;服务器已经启动&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Node-js的介绍&quot;&gt;&lt;a href=&quot;#一、Node-js的介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Node.js的介绍&quot;&gt;&lt;/a&gt;一、Node.js的介绍&lt;/h3&gt;&lt;p&gt;简单的说 Node.js 就是运行在服务端的 JavaScr
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>新浪云+微信JSSDK</title>
    <link href="http://yoursite.com/2016/12/08/%E6%96%B0%E6%B5%AA%E4%BA%91+%E5%BE%AE%E4%BF%A1JSSDK/"/>
    <id>http://yoursite.com/2016/12/08/新浪云+微信JSSDK/</id>
    <published>2016-12-08T07:26:16.000Z</published>
    <updated>2017-02-08T07:48:52.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、新浪云"><a href="#一、新浪云" class="headerlink" title="一、新浪云"></a>一、新浪云</h3><h6 id="1-登录新浪云"><a href="#1-登录新浪云" class="headerlink" title="1.登录新浪云"></a>1.登录新浪云</h6><p><img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/If18R*RFrSMAknMi5fLYuxmuvWZSHr5l1F0QNP.evAA!/b/dHcBAAAAAAAA&amp;bo=MwKnAAAAAAADALM!&amp;rf=viewer_4" alt="image"><br>    如果有微博账号的可以直接用微博账号登录即可</p>
<h6 id="2-点击云应用SAE"><a href="#2-点击云应用SAE" class="headerlink" title="2.点击云应用SAE"></a>2.点击云应用SAE</h6><p><img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/Bmw3a5zzL3laIsK2.xKSXBvHwUcicf3xx68L2hufVHM!/b/dN4AAAAAAAAA&amp;bo=RAF.AAAAAAADAB4!&amp;rf=viewer_4" alt="image"></p>
<h6 id="3-点击进入控制台"><a href="#3-点击进入控制台" class="headerlink" title="3.点击进入控制台"></a>3.点击进入控制台</h6><p><img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/SM764hsk1wQTA1j9JrxSCe9d2C6.OMY3i1cP7zAUD3g!/b/dHoBAAAAAAAA&amp;bo=awIAAQAAAAADAE0!&amp;rf=viewer_4" alt="image"></p>
<h6 id="4-点击创建新应用"><a href="#4-点击创建新应用" class="headerlink" title="4.点击创建新应用"></a>4.点击创建新应用</h6><p><img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/l7wIj0QgRThYhCdmLUq9yNBuHA*m.K3Xyq4ttEVYeKc!/b/dN0AAAAAAAAA&amp;bo=lgLRAAAAAAADAGA!&amp;rf=viewer_4" alt="image"></p>
<h6 id="5-设置部署环境-二级域名可以自己随意添加"><a href="#5-设置部署环境-二级域名可以自己随意添加" class="headerlink" title="5.设置部署环境(二级域名可以自己随意添加)"></a>5.设置部署环境(二级域名可以自己随意添加)</h6><p><img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/7fvuUjZT*xC9n7hs7RN8Plzi5hBJpJ1DmYpw6GMX5mE!/b/dHcBAAAAAAAA&amp;bo=PAJXAgAAAAADAE4!&amp;rf=viewer_4" alt="image"></p>
<h6 id="6-获得Git仓库信息还有部署说明"><a href="#6-获得Git仓库信息还有部署说明" class="headerlink" title="6.获得Git仓库信息还有部署说明"></a>6.获得Git仓库信息还有部署说明</h6><p><img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/ctcXMr5tCLKs3mHQqcxHqul9fiSTS1pcVKL5VYI8erM!/b/dN0AAAAAAAAA&amp;bo=WALLAQAAAAADALU!&amp;rf=viewer_4" alt="image"></p>
<h6 id="7-打开本地文件夹使用git命令然后使用git信息把该文件夹部署到新浪云中"><a href="#7-打开本地文件夹使用git命令然后使用git信息把该文件夹部署到新浪云中" class="headerlink" title="7.打开本地文件夹使用git命令然后使用git信息把该文件夹部署到新浪云中"></a>7.打开本地文件夹使用git命令然后使用git信息把该文件夹部署到新浪云中</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(1)git init 配置git环境</div><div class="line">(2)git add . 把文件加入到缓存区</div><div class="line">(3)git commit -m <span class="string">"注释"</span></div><div class="line">(4)$ git remote add sae https://git.sinacloud.com/biga</div><div class="line">(5)$ git push sae master:1</div></pre></td></tr></table></figure>
<h6 id="8-只需在新浪云页面刷新一下页面"><a href="#8-只需在新浪云页面刷新一下页面" class="headerlink" title="8.只需在新浪云页面刷新一下页面"></a>8.只需在新浪云页面刷新一下页面</h6><p><img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/qYEsRXxTCfY5ba1yz1M9uwoZyt3bR1WqxZ2evtrTlXM!/b/dNwAAAAAAAAA&amp;bo=rQPJAAAAAAADAEI!&amp;rf=viewer_4" alt="image"></p>
<h6 id="9-点击链接"><a href="#9-点击链接" class="headerlink" title="9.点击链接"></a>9.点击链接</h6><p>注意：当一个后台应用服务器访问的时候默认都是优先找index开头的文件，所以可能进去是直接在根目录下面是访问不到的<br>但是可以自己手动添加路径</p>
<h6 id="10-可以使用二维码生成器，制作二维码"><a href="#10-可以使用二维码生成器，制作二维码" class="headerlink" title="10.可以使用二维码生成器，制作二维码"></a>10.可以使用二维码生成器，制作二维码</h6><p><img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/2sVYiuqx8jTiRjkAzEphxakOnWWJsjTUdkg0b7CQkW4!/b/dHcBAAAAAAAA&amp;bo=1gHCAQAAAAADADE!&amp;rf=viewer_4" alt="image"></p>
<h3 id="二、微信公众号"><a href="#二、微信公众号" class="headerlink" title="二、微信公众号"></a>二、微信公众号</h3><p>微信JSSDK是什么？以及使用流程？</p>
<p>如果项目需要使用微信提供的一些功能，例如：分享、定位、扫一扫、支付、等，就需要借助微信JSSDK来实现这些功能</p>
<p>使用流程：<br>1.将自己项目的域名添加到微信公众账号中，设置为安全域名<br>2.在代码中引入JSSDK所需的js文件<br>3.进行配置: wx.config({debug: true, appId: ‘’, timestamp: ‘’, nonceStr: ‘’, signature: ‘’, jsApiList: []});<br>4.调用JSSDK提供的方法进行调用</p>
<h6 id="（一）先注册一个微信公众号"><a href="#（一）先注册一个微信公众号" class="headerlink" title="（一）先注册一个微信公众号"></a>（一）先注册一个微信公众号</h6><p>1.打开微信公众平台<br><img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/pRO8xEx5mM21rCp4cd8.2gW*YnBo1NEAU5AxL6r6pGc!/b/dHkBAAAAAAAA&amp;bo=PQLFAAAAAAADAN8!&amp;rf=viewer_4" alt="image"><br>2.点击立即注册 </p>
<p>3.点击订阅号<br><img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/r1oGFeP8i8m6.jrgKD9oL3szy.R0dqqD7J3dTK2l.gc!/b/dN0AAAAAAAAA&amp;bo=vAK9AAAAAAADACY!&amp;rf=viewer_4" alt="image"><br>4.然后填写信息，在选择类型的时候，选择个人  </p>
<h6 id="（二）微信JS-SDK"><a href="#（二）微信JS-SDK" class="headerlink" title="（二）微信JS-SDK"></a>（二）微信JS-SDK</h6><p>1.点击开发者工具<br><img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/qagyp2elqo6i2sLzZdp6oYQLScphcQAUY5xetHAIsuE!/m/dAkBAAAAAAAA&amp;bo=8QB3AAAAAAADB6Q!&amp;rf=photolist" alt="image"><br>2.点击进入开发者文档<br><img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/m2iHZWDUnmnaHE2S6X8HeeLqr38rAinvKixnPQHmFFw!/m/dOEAAAAAAAAA&amp;bo=3gPYAAAAAAADByc!&amp;rf=photolist" alt="image"></p>
<p>  3.点击微信网页开发</p>
<p>   <img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/mx0RAbOlKcyOGxWf36*9Thdbe53.Akou73vDRgRgWj0!/m/dN4AAAAAAAAA&amp;bo=LQHwAAAAAAADB*4!&amp;rf=photolist" alt="image"> </p>
<p>  4.点击微信JS-SDK说明文档</p>
<p>  <img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/MWEJ1q1CDjOYlYlb8V6Jd5PoBe8OP.vzAcHxXYEchaA!/m/dI0BAAAAAAAA&amp;bo=zwDYAAAAAAADBzU!&amp;rf=photolist" alt="image"></p>
<p> 然后回到主页面点击公众号设置   </p>
<p>   <img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/LB6Z7LY3rjkafz4mhG5tWtVs3QSQxetlx8p*Yl2rGdY!/m/dHwBAAAAAAAA&amp;bo=6gBVAAAAAAADB50!&amp;rf=photolist" alt="image"></p>
<p> 点击功能设置进入JS接口安全域名   </p>
<p>   <img src="http://a4.qpic.cn/psb?/V11mx6TD0YZt7E/BT*9W*fJz26JUyBRVjYPyNReKzP2W3L30u3JS9luVFE!/m/dI8AAAAAAAAA&amp;bo=8wGZAAAAAAADB0k!&amp;rf=photolist" alt="image"><br> <img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/ZkJVZD7wogNK93fd8RlkFnTi9br8PX7xEIwhuzZxcwE!/b/dHgBAAAAAAAA&amp;bo=AgM.AAAAAAADBx0!&amp;rf=viewer_4" alt="image">  </p>
<p> 然后到新浪云中把刚刚得到的那个链接粘贴过来放到域名X中，然后点击下载MP文件再放到我们上传到新浪云的文件中，然后再重新进行一遍上传操作  </p>
<p><img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/HOlTf5LhY3CRY4MzSpN85.JETnFdM6HooU0jT3Utw0s!/m/dHkBAAAAAAAA&amp;bo=WQNRAgAAAAADBys!&amp;rf=photolist" alt="image">  </p>
<p> 又回到JS-SDK说明文档的页面，看起来会觉得特别繁琐，但是没关系，我们可以直接翻到最后面，就会看到一个实例代码，然后进行下载<br><img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/2SkENur5W9E*uT8SX0GYS391K87McieFsaHjCS9ywxQ!/b/dHkBAAAAAAAA&amp;bo=AQOyAAAAAAADAJU!&amp;rf=viewer_4" alt="image">  </p>
<p>然后打开文档，会看到php文件，因为一开始我们选择的就是php服务端，然后里面还会有一个sample.php的文件，里面就是示例代码了，已经帮我们写好了  </p>
<p>  <img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/EBOIm3W10MHPCdcjmGkZ1eUVK3vGYZfGd.Khr3Nd4N4!/b/dI8AAAAAAAAA&amp;bo=xgCBAAAAAAADAGI!&amp;rf=viewer_4" alt="image">  </p>
<p>  在上传到新浪云的文件中打开index.html,比如想要实现点击选取照片按钮，就会访问到相册的功能，就是绑定click事件，函数名就是openWeiixn  </p>
<p>  <img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/YNSQfkRYHEQcRuTHXWszQ.8oiMp5BqbhdXTOZqpU398!/b/dAkBAAAAAAAA&amp;bo=gwJcAAAAAAADAPg!&amp;rf=viewer_4" alt="image">  </p>
<p>  然后把之前下载的php文件中的四个粘贴过来到本地新浪云的文件中<br>把里面的sample.php名字改为weixin.php,因为上面的事件函数就是openWeiixn的函数里面的链接到weixin.php<br>然后把AppID和AppSecret换成我们的密钥信息  </p>
<p>  <img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/3Y7CNlJJaOd6I44BtNDGWWWPp8LUY28gWtpX8RLTdAc!/m/dHgBAAAAAAAA&amp;bo=zAKFAAAAAAADB2k!&amp;rf=photolist" alt="image">  </p>
<p>  密钥需要显示，自己安全验证   </p>
<p>  <img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/qagyp2elqo6i2sLzZdp6oYQLScphcQAUY5xetHAIsuE!/m/dAkBAAAAAAAA&amp;bo=8QB3AAAAAAADB6Q!&amp;rf=photolist" alt="image"><br><img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/H.gefrCrzrx5b*7t7pDwmOigXQLxkYfn4F*2bKLM6Uc!/b/dHkBAAAAAAAA&amp;bo=7AHwAAAAAAADADg!&amp;rf=viewer_4" alt="image"></p>
<p>把自己想要的功能接口粘贴到jsApiList  </p>
<p>  <img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/w6FjwbVKPSWU6vi8HzErro1T*k2T3BNiX.ISzFz9TCI!/b/dHgBAAAAAAAA&amp;bo=HgGBAAAAAAADALs!&amp;rf=viewer_4" alt="image"></p>
<p>  然后在接口内容粘贴过来到wx.ready的函数中  </p>
<p>  <img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/yYUTIvVA.BMODe.ke3K*KBgp1cTL7iFpidYVohRBP8M!/b/dOEAAAAAAAAA&amp;bo=1gJLAQAAAAADALs!&amp;rf=viewer_4" alt="image">   </p>
<p>  最后就可以预览了，如果报错可以查看文档<br> <img src="http://a4.qpic.cn/psb?/V11mx6TD0YZt7E/Zv3eg2muGmApyrl3c7yCGPZQTJ*MgsGYUyThG7q*p2A!/m/dI8AAAAAAAAA&amp;bo=swN6AQAAAAADB.k!&amp;rf=photolist" alt="image">  </p>
<p>把最后的特殊问题复制到我们刚刚的weixin.php文件中  </p>
<p><img src="http://a4.qpic.cn/psb?/V11mx6TD0YZt7E/2fPVGKYxl6dFhB3aNsxYKbwdrndiVfepAHGzMQ4TM80!/m/dHcBAAAAAAAA&amp;bo=xAL6AAAAAAADBx4!&amp;rf=photolist" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、新浪云&quot;&gt;&lt;a href=&quot;#一、新浪云&quot; class=&quot;headerlink&quot; title=&quot;一、新浪云&quot;&gt;&lt;/a&gt;一、新浪云&lt;/h3&gt;&lt;h6 id=&quot;1-登录新浪云&quot;&gt;&lt;a href=&quot;#1-登录新浪云&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3新属性和动画</title>
    <link href="http://yoursite.com/2016/10/18/css3%E6%96%B0%E5%B1%9E%E6%80%A7%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2016/10/18/css3新属性和动画/</id>
    <published>2016-10-18T03:26:16.000Z</published>
    <updated>2017-02-09T05:42:37.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、背景和边框"><a href="#一、背景和边框" class="headerlink" title="一、背景和边框"></a>一、背景和边框</h3><p>1.border-radius:  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10px 20px 30px 40px /50px 60px 70px 80px;</div></pre></td></tr></table></figure>
<p>2.box-shadow:   x y blur color;<br>inset / outset 设置内外阴影<br>语法：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box-shadow: h-shadow v-shadow blur spread color inset;</div></pre></td></tr></table></figure>
<p>第一个数值是水平方向的阴影方向，正的是右侧，左侧是负值，第一个表示的垂直方向的正的表示在下边，上面为负值前面的值表示的是投影的像素，第三个值表示的是阴影的范围  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">box-shadow: 8px 8px 24px red;</div><div class="line">    /*设置里面的阴影inset，默认的是outset外部的*/</div><div class="line">    /*border:1px solid red;*/</div><div class="line">    /*box-shadow: 8px 8px 24px gray,</div><div class="line">                  5px 5px 10px gray,</div><div class="line">                  10px 10px 15px gray;*/</div><div class="line">    /*如果想要改变阴影的浓度*/</div></pre></td></tr></table></figure>
<p>3.background-size   </p>
<p>设置背景图片的尺寸，只有一个值表示图片的宽度设置为指定的值，为了保证缩放后的图片不变形，高度会缩放对应的尺寸。有两个值时，第一个值设置的是图片的宽度，第二个值设置的是图片的高度。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background-image: url(zhangyixing.jpg);</div><div class="line">background-size: 100%;</div></pre></td></tr></table></figure>
<p>4.background-origin  </p>
<p>设置图片展示的起始位置，可以从边框、内边距、content的左上角开始渲染图片。从渲染起始位置开始展示图片，一直到图片展示结束位置位置，如果没有关闭平铺，则空白位置平铺填满，如果关闭了平铺，则空白保留。  padding-box 默认  ，border-box</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background-image:url(img/cdb6c8a19d60.jpg);</div><div class="line">background-origin: content-box;</div></pre></td></tr></table></figure>
<p>5.background-clip 背景的裁剪<br>border-box | padding-box | content-box  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">background-image:url(img/cdbba61e4660.jpg);</div><div class="line">background-clip: content-box;</div><div class="line">background-origin: content-box;</div><div class="line">background-size: 100%;</div></pre></td></tr></table></figure>
<p>6.颜色渐变<br>(1) 线性渐变  ：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">background: linear-gradient(to right, red, green, blue);  </div><div class="line">background: linear-gradient(45deg, red, blue);</div><div class="line">background: linear-gradient(180deg, blue, white);</div></pre></td></tr></table></figure>
<p>(2) 径向渐变 ：<br>background: radial-gradient(aqua, blue);<br>background: radial-gradient(circle, aqua, blue);<br>background: radial-gradient(100px 20px, aqua, blue);</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: radial-gradient(100px 10px, green, yellow);</div></pre></td></tr></table></figure>
<h3 id="二、文本效果"><a href="#二、文本效果" class="headerlink" title="二、文本效果"></a>二、文本效果</h3><p>text-shadow x, y, blur, color blur 和 color 是可选<br>word-wrap英文单词换行 normal | break-word 强制换行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">p.test1 &#123;</div><div class="line">    white-space: nowrap; </div><div class="line">    width: 200px; </div><div class="line">    border: 1px solid <span class="comment">#000000;</span></div><div class="line">    overflow: hidden;</div><div class="line">    text-overflow: clip; </div><div class="line">&#125;</div><div class="line"> </div><div class="line">p.test2 &#123;</div><div class="line">    white-space: nowrap; </div><div class="line">    width: 200px; </div><div class="line">    border: 1px solid <span class="comment">#000000;</span></div><div class="line">    overflow: hidden;</div><div class="line">    text-overflow: ellipsis; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、动画"><a href="#三、动画" class="headerlink" title="三、动画"></a>三、动画</h3><p>(1) 过渡动画：transition<br>css3过渡是元素从一种样式逐渐改变为另一种的效果<br>有两个必须的内容：</p>
<p>1、指定要添加的效果的css属性<br>2、指定效果的持续时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">&#123;</div><div class="line">    transition: width 2s;</div><div class="line">    -webkit-transition: width 2s; </div><div class="line">&#125;</div><div class="line"></div><div class="line">div:hover</div><div class="line">&#123;</div><div class="line">     width:300px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果要添加多个样式的变换效果，添加的属性由逗号分隔</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">&#123;</div><div class="line">    transition: width 2s, height 2s, transform 2s;</div><div class="line">    -webkit-transition: width 2s, height 2s, -webkit-transform 2s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>transition-property:规定应用过渡的css属性的名称，可以设置all表示所有的改变属性都可以过渡</p>
<p>transition-duration:定义过渡效果花费的时间，默认是0</p>
<p>transition-timing-function:规定过渡效果的时间曲线，默认是”ease”</p>
<p>transition-delay:规定过渡效果何时开始，默认是0，过渡的延迟时间  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">&#123;</div><div class="line">    transition-property: width;</div><div class="line">    transition-duration: 1s;</div><div class="line">    transition-timing-function: linear;</div><div class="line">    transition-delay: 2s;</div><div class="line">    /* Safari */</div><div class="line">    -webkit-transition-property:width;</div><div class="line">    -webkit-transition-duration:1s;</div><div class="line">    -webkit-transition-timing-function:linear;</div><div class="line">    -webkit-transition-delay:2s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于浏览器兼容问题，只要写一个原本的，还写一个webkit适配就可以了，因为现在大部分浏览器的内核都是webkit，ie在10.0之前是完全不支持的，在10.0之后就是完全支持的，不用写浏览器前缀。 </p>
<p>(2) 关键帧动画  </p>
<p>1、定义关键帧动画：keyframes（关键帧动画）<br>Webkit内核的浏览器器需要添加前缀(Safari,Chrome)  -webkit-keyframes，-webkit-animation  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@keyframes dong &#123;</div><div class="line">    from &#123; background-color: red; &#125;</div><div class="line">    to &#123; background-color: blue; &#125;</div><div class="line">&#125;</div><div class="line">@-webkit-keyframes dong &#123;&#125;</div><div class="line">@keyframes dong &#123;</div><div class="line">    50% &#123; background-color: red; &#125;</div><div class="line">    100% &#123; background-color: blue; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、调用并配置关键帧动画：animation<br>animation-name 动画名称<br>animation-duration 动画时间<br>animation-iteration-count: infinite; 动画次数<br>animation-timing-function: ease; 时间函数<br>animation-delay: 1s; 动画延迟时间<br>animation-direction: reverse;  </p>
<p>动画播放的方向</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">normal 默认值  </div><div class="line">    </div><div class="line">reverse 动画反向播放  </div><div class="line"></div><div class="line">alternate 第一次正向播放，第二次反向播放  </div><div class="line"></div><div class="line">alternate-reverse 第一次反向播放，第二次正向播放</div></pre></td></tr></table></figure>
<p>如果把动画属性配置在animation中，各个属性的顺序可以打乱，但最好按照某一习惯性顺序，如果同时出现了两个时间值，第一个表示动画执行时间，第二个表示动画执行等待时间  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-animation: turn 10s linear;</div><div class="line">-o-animation: turn 10s linear;</div><div class="line">animation: turn 10s linear;</div></pre></td></tr></table></figure>
<p>(3)2D动画  (transform)<br>    位移：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform: translate(100px, 100px);</div><div class="line">transform: translateX(100px);</div><div class="line">transform: translateY(100px);</div></pre></td></tr></table></figure></p>
<p>旋转：<br>transform: rotate(45deg)(围绕对角线旋转)   </p>
<p>缩放：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform: scale(1.5);</div><div class="line">transform: scaleX(1.5);</div><div class="line">transform: scaleY(1.5);</div></pre></td></tr></table></figure>
<p>倾斜:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">transform: skewX(45deg);</div><div class="line">transform: skewY(45deg);</div></pre></td></tr></table></figure></p>
<p>同时使用多个:<br>    会发生覆盖的问题  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">transform: translate(100px, 100px)</div><div class="line">transform: skewX(45deg);</div></pre></td></tr></table></figure>
<p>可以合写<br>transform: translate(100px,100px)skewX(45deg);<br>原点：会影响旋转所围绕的点，会影响缩放所参考的点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transform-origin: left top;</div></pre></td></tr></table></figure></p>
<p>(4)3D动画<br>rotateX transform: rotateX(45deg);<br>rotateY transform: rotateY(45deg);<br>rotateZ  围绕Z轴进行行旋转<br>默认围绕中心进行旋转<br>translateZ  直接写没有效果的需要开启3D<br>开启3D相关设置：<br>transform-style: preserve-3d;<br>添加给父元素<br>该声明应用在3D变换的兄弟元素们的父元素上，也就是舞台元素<br>perspective: 2000px; 添加给根节点(body或者html) 距离<br>perspective-origin: 25% 75%;<br>添加给父元素  </p>
<p>值  </p>
<p>X  left | center | right   </p>
<p>Y  top | center | bottom  </p>
<p>设置基准点</p>
<p>backface-visibility: hidden;  翻转后设置背景不可见</p>
<p>(5)3D旋转盒子    </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">    width: 600px;</div><div class="line">    height: 600px;</div><div class="line">    position: absolute;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#wrap &#123;</span></div><div class="line">	font-size: 5em;</div><div class="line">	position: relative;</div><div class="line">	margin: 0 auto;</div><div class="line">	/* 把父标签当做3d舞台*/</div><div class="line">	transform-style: preserve-3d;</div><div class="line">	transition: all 5s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 父标签转动带动子标签旋转*/</div><div class="line"><span class="comment">#wrap:hover &#123;</span></div><div class="line">	transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*前面*/</div><div class="line"><span class="comment">#div1 &#123;</span></div><div class="line">	background-color:red;</div><div class="line">	transform: translateZ(300px);</div><div class="line">	-webkit-transform: translateZ(300px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 后面*/</div><div class="line"><span class="comment">#div2 &#123;</span></div><div class="line">	background-color: black;</div><div class="line">	/* 绕Y轴180度*/</div><div class="line">	transform: rotateY(180deg) translateZ(300px);</div><div class="line">	-webkit-transform: rotateY(180deg) translateZ(300px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*左面*/</div><div class="line"><span class="comment">#div3 &#123;</span></div><div class="line">	background-color: yellow;</div><div class="line">	/*绕y轴负方向90度*/</div><div class="line">	transform: rotateY(-90deg) translateZ(300px);</div><div class="line">	-webkit-transform: rotateY(-90deg) translateZ(300px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*右面*/</div><div class="line"><span class="comment">#div4 &#123;</span></div><div class="line">	background-color: hotpink;</div><div class="line">	/*绕Y轴正方向90度*/</div><div class="line">	transform: rotateY(90deg) translateZ(300px);</div><div class="line">	-webkit-transform: rotateY(90deg) translateZ(300px);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 上面*/</div><div class="line"><span class="comment">#div5 &#123;</span></div><div class="line">	background-color: green;</div><div class="line">	transform: rotateX(90deg) translateZ(300px);</div><div class="line">	-webkit-transform: rotateX(90deg) translateZ(300px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*下面*/</div><div class="line"><span class="comment">#div6 &#123;</span></div><div class="line">	background-color:  orange;</div><div class="line">	transform: rotateX(-90deg) translateZ(300px);</div><div class="line">	-webkit-transform: rotateX(-90deg) translateZ(300px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、背景和边框&quot;&gt;&lt;a href=&quot;#一、背景和边框&quot; class=&quot;headerlink&quot; title=&quot;一、背景和边框&quot;&gt;&lt;/a&gt;一、背景和边框&lt;/h3&gt;&lt;p&gt;1.border-radius:  &lt;/p&gt;
&lt;figure class=&quot;highlight ba
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5入门</title>
    <link href="http://yoursite.com/2016/08/08/HTML5%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2016/08/08/HTML5入门/</id>
    <published>2016-08-08T03:02:40.000Z</published>
    <updated>2017-02-09T06:09:52.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本页面结构（H5新标签）"><a href="#一、基本页面结构（H5新标签）" class="headerlink" title="一、基本页面结构（H5新标签）"></a>一、基本页面结构（H5新标签）</h3><p>页头：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;header&gt;&lt;/header&gt;</div></pre></td></tr></table></figure>
<p>页面主体：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;main&gt;&lt;/main&gt;</div></pre></td></tr></table></figure>
<p>划分页面子区域：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;section&gt;&lt;/section&gt;</div></pre></td></tr></table></figure>
<p>解释了什么是WWF  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;section&gt;</div><div class="line">    &lt;h1&gt;WWF&lt;/h1&gt;</div><div class="line">    &lt;p&gt;The World Wide Fund <span class="keyword">for</span> Nature (WWF) is....&lt;/p&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure>
<p>页脚：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;footer&gt;&lt;/footer&gt;</div></pre></td></tr></table></figure>
<p>版权：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;address&gt;&lt;/address&gt;</div></pre></td></tr></table></figure>
<p>定义带有标签的文本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;mark&gt;&lt;/mark&gt;</div></pre></td></tr></table></figure>
<p>部分文本高亮显示:  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Do not forget to buy &lt;mark&gt;milk&lt;/mark&gt; today.&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>时间：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;time&gt;&lt;/time&gt;</div></pre></td></tr></table></figure>
<p>文章：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;article&gt;&lt;/article&gt;用article可以打破搜索引擎对h1标签的限制</div></pre></td></tr></table></figure>
<p>广告：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;aside&gt;&lt;/aside&gt;展示和当前页面关系不大的内容（广告）</div></pre></td></tr></table></figure>
<p>分割线：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;hr/&gt;</div></pre></td></tr></table></figure>
<p>提示框：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;datalist&gt;&lt;/datalist&gt;</div></pre></td></tr></table></figure>
<p>option在提示框中展示的数据条目，value属性的值或在用户按下<br>回车后填写进输入框，option的值会在条目侯勇浅灰色的字体显示<br>用list和id设置一样的值来绑定  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;input list=<span class="string">"device"</span> /&gt;</div><div class="line">    &lt;datalist id=<span class="string">'device'</span>&gt;</div><div class="line">    &lt;option value=<span class="string">"iPhone"</span>&gt;iphone 7&lt;/option&gt;</div><div class="line">    &lt;option value=<span class="string">"ipad"</span>&gt;&lt;/option&gt;</div><div class="line">    &lt;option value=<span class="string">"imac"</span>&lt;/option&gt;</div><div class="line">    &lt;/datalist&gt;</div></pre></td></tr></table></figure>
<p>为input元素定义标注：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;label&gt;&lt;/label&gt;</div></pre></td></tr></table></figure>
<p>label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可<br>用性。如果您在 label 元素内点击文本，就会触发此控件。就是说，当用<br>户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。<br>要把label和input绑定就要把label中的for中的值跟input中的id设置相同  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;用户&lt;/label&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">""</span> id=<span class="string">""</span> /&gt;</div></pre></td></tr></table></figure>
<p>提示和注释：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;details&gt;&lt;/details&gt;</div></pre></td></tr></table></figure>
<p>要与summery相配合使用，如果不用<br>summery就是默认的标题，就是详细信息，而如果用summery就会更改默认<br>的标题，默认只能看见标题，如果展开就会看见details中的内容，如果想<br>要一进去就是看见展开的效果，就可以给details添加一个属性open，因为<br>属性和属性值都是open，所以可以省略写只写一个就可以，以后只要是这<br>种类似的都可以这样简写。</p>
<p>包裹图片、音频、视频：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;figure&gt;&lt;/figure&gt;</div></pre></td></tr></table></figure>
<p>使用figcaption来给图片添<br>加标题或讲解。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;figure&gt;</div><div class="line">    &lt;img src=<span class="string">""</span> /&gt;</div><div class="line">    &lt;figcaption id=<span class="string">""</span>&gt;			</div><div class="line">    &lt;/figcaption&gt;</div><div class="line">&lt;/figure&gt;</div></pre></td></tr></table></figure>
<p>进度条：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;progress&gt;&lt;/progress&gt;</div></pre></td></tr></table></figure>
<p>有两个重要的属性，一个是value是当前<br>值，还有一个是max是指完成的总值  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;progress value=<span class="string">"50"</span> max=<span class="string">"100"</span>&gt;</div><div class="line">&lt;/progress&gt;</div></pre></td></tr></table></figure>
<h3 id="二、新表单元素"><a href="#二、新表单元素" class="headerlink" title="二、新表单元素"></a>二、新表单元素</h3><p>旧的回顾：  单选框：radio  </p>
<p>用name值来分组，如果不设置name值相同，就不是单选了，就<br>可以同时选择多个选项  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">男：&lt;input <span class="built_in">type</span>=<span class="string">"radio"</span>name=<span class="string">"gender"</span> value=<span class="string">"man"</span>/&gt;</div><div class="line">女：&lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"gender"</span> value=<span class="string">"woman"</span>/&gt;</div><div class="line"></div><div class="line">复选框：checkbox  </div><div class="line"></div><div class="line">游泳：&lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> value=<span class="string">"youyong"</span>/&gt;</div><div class="line">篮球：&lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> value=<span class="string">"lanqiu"</span>/&gt;</div></pre></td></tr></table></figure>
<p>上传文件：file，但是只能选择一个文件，如果想要<br>选择多个文件就可以添加一个属性，就是multiple，这个属性也是可以<br>缩写成一个属性  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"file"</span> multiple/&gt;</div></pre></td></tr></table></figure>
<p>表单重置：reset<br>因为用户体验不太好（总是会把登录和重置搞错），所以现在就不怎么<br>用了，所以见得少  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"reset"</span> value=<span class="string">"重置"</span>/&gt;</div></pre></td></tr></table></figure>
<p>多行输入框：textarea  </p>
<p>有两个属性：rows和cols可以用来控制输入框的大小，但是一般不用它<br>们来控制，一般都是用width和height，因为这样对页面结构好掌控，因<br>为页面都是以px像素来做的，不然不好控制。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;textarea name=<span class="string">""</span> rows=<span class="string">"8"</span> cols=<span class="string">"40"</span>&gt;&lt;/textarea&gt;</div></pre></td></tr></table></figure>
<p>下拉菜单：select,如果想多选也是可以加multiple这个属性，但是一般<br>不用这么做，因为可以直接使用多选按钮  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select class=<span class="string">""</span> name=<span class="string">""</span> multiple&gt;</div><div class="line">    &lt;option value=<span class="string">"iphone"</span>&gt;iphone&lt;/option&gt;</div><div class="line">    &lt;option value=<span class="string">"ipad"</span>&gt;ipad&lt;/option&gt;</div><div class="line">    &lt;option value=<span class="string">"ipod"</span>&gt;iMac&lt;/option&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>新的：  </p>
<p>日期：date  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"date"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>时间：time  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"time"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>星期:week  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"week"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>月份：month   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"month"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>邮箱：email  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"email"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>网址：url  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"url"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>数值：number  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"number"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>范围：range，有三个属性，最小值min，最大值;max,还有一个就是步<br>调，一次移动多少。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"range"</span> name=<span class="string">"name"</span> value=<span class="string">""</span> min=<span class="string">"0"</span> max=<span class="string">"100"</span> step=<span class="string">"50"</span>&gt;</div></pre></td></tr></table></figure>
<p>颜色：color  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"color"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<p>搜素框：search  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"search"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="三、新标签属性"><a href="#三、新标签属性" class="headerlink" title="三、新标签属性"></a>三、新标签属性</h3><p>tabindex：用来设置标签可以通过tab按键选中通过这个属性可以设置<br>tab按键按下时选择标签顺序编号  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p tabindex=<span class="string">"1"</span>&gt;哈哈&lt;/p&gt;</div><div class="line">&lt;p tabindex=<span class="string">"2"</span>&gt;嘻嘻&lt;/p&gt;</div><div class="line">&lt;p tabindex=<span class="string">"3"</span>&gt;嘿嘿&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>required:如果某一个表单元素配置了该属性，则该元素必须有值，否则<br>数据无法提交  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form class=<span class="string">""</span> action=<span class="string">"http://www.baidu.com"</span> method=<span class="string">"get"</span>&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">""</span> name=<span class="string">"name"</span> value=<span class="string">""</span> required&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">""</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>hidden隐藏且不占空间   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p hidden&gt;啦啦&lt;/p&gt;</div></pre></td></tr></table></figure>
<h3 id="四、隐藏方式的总结"><a href="#四、隐藏方式的总结" class="headerlink" title="四、隐藏方式的总结"></a>四、隐藏方式的总结</h3><p>1.给标签设置display:none,标签隐藏且不占页面位置  </p>
<p>2.给标签设置opcity:0,标签隐藏但是占据页面位置  </p>
<p>3.给标签设置宽高都为0，overflow:hidden，标签隐藏且不占<br>据页面位置  </p>
<p>4.给标签设置visibility：hidden，标签隐藏但是占据页面位<br>置  </p>
<h3 id="五、拖放"><a href="#五、拖放" class="headerlink" title="五、拖放"></a>五、拖放</h3><p>处理步骤：   </p>
<p>a定义可拖动目标<br>b定义被拖动的数据，可能为多种不同格式<br>c允许设置拖拽效果<br>d定义放置区域<br>e在drop发生的时候做一些事情  </p>
<p>1、拖拽目标的开始的拖拽事件：ondragstart  </p>
<p>在开始拖拽事件中e对象中有一个dataTransfer属性，用来保存被拖动的数据<br>e.dataTransfer也是一个对象，可以保存数据，但是不能通过“.”语法<br>来访问和设置该属性，有getData和setData两个方法来进行设置和访问<br>该属性，可以保存一个或多个数据，在所有拖动事件中该属性都是可用<br>的，但是不能单独创建  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">img.ondragstart = <span class="keyword">function</span>(e)&#123;</div><div class="line">    e.dataTransfer.setData(<span class="string">"type/img"</span>,this.id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、拖拽目标的结束的拖拽事件：ondragend  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">img.ondragend = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(<span class="string">"目标拖拽结束"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、拖拽目标进入当前标签：ondragenter  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">div1.ondragenter = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">          console.log(<span class="string">"目标进来了"</span>);</div><div class="line">          div1.style.boxShadow = <span class="string">"0 0 20px red"</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>4、拖拽目标在当前标签之上  </p>
<p>div1.ondragover = function(){<br>      console.log(“djsaf”);<br>      return false;<br>}<br>5、拖拽离开事件  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">div1.ondragleave = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(<span class="string">"拖拽离开了"</span>);</div><div class="line">      div1.style.boxShadow = <span class="string">"none"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>6、拖拽松开事件  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">div1.ondrop = <span class="keyword">function</span>(e)&#123;</div><div class="line">         console.log(<span class="string">"目标放入"</span>);</div><div class="line">         var id = e.dataTransfer.getData(<span class="string">"type/img"</span>);</div><div class="line">         var img = document.querySelector(a);</div><div class="line">         this.appendChild(img);</div><div class="line">         img.style.position = <span class="string">'absolute'</span>;</div><div class="line">         img.style.top = <span class="string">"-"</span>+(img.offsetHeight-div1.offsetHeight)/2+<span class="string">"px;</span></div><div class="line">         img.style.left = "-<span class="string">"+(img.offsetWidth-div1.offsetWidtht)/2+"</span>px<span class="string">";</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="六、把电脑里的图片拖放到浏览器中"><a href="#六、把电脑里的图片拖放到浏览器中" class="headerlink" title="六、把电脑里的图片拖放到浏览器中"></a>六、把电脑里的图片拖放到浏览器中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">// 获取拖拽目的地的标签  </div><div class="line">    var wrap = document.querySelector(<span class="string">"#wrap"</span>);</div><div class="line">    // 给拖拽目的地添加enter和leave事件，修改css样式</div><div class="line">    wrap.ondragenter = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        this.style.backgroundColor = <span class="string">"gray"</span>;</div><div class="line">    &#125;</div><div class="line">    wrap.ondragleave = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        this.style.backgroundColor = <span class="string">"white"</span>;</div><div class="line">    &#125;</div><div class="line">    // 取消over事假的默认事件，保证drop事件能被触发</div><div class="line">    wrap.ondragover = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;	</div><div class="line">    // 拿到拖拽目的地的drop事件，取消默认事件</div><div class="line">    wrap.ondrop = <span class="keyword">function</span>(e) &#123;		</div><div class="line">        // 松手后背景颜色变白</div><div class="line">        this.style.backgroundColor = <span class="string">"white"</span>;		</div><div class="line">        // 获取到拖拽进来的文件</div><div class="line">        var file = e.dataTransfer.files[0];</div><div class="line">        // 创建文件读取对象，来读取file中的数据。</div><div class="line">        var fileReader = new FileReader();</div><div class="line">        // 当文件读取对象读取完毕后，获取到读出来的数据</div><div class="line">        fileReader.onload = <span class="keyword">function</span> (e) &#123;</div><div class="line">            // 获取按照指定格式读取出来的数据</div><div class="line">            // 获取图片数据的方式</div><div class="line">            // 1、e.target.result;</div><div class="line">            // 2、fileReader.result;</div><div class="line">            var data = e.target.result;		    		</div><div class="line">            // 把读取出来的数据设置为div的背景图展示出来</div><div class="line">            wrap.style.background = <span class="string">"url("</span>+data+<span class="string">") no-repeat center"</span>;</div><div class="line">            wrap.innerText = <span class="string">''</span>;</div><div class="line">        &#125;		    </div><div class="line">        // 读取文件</div><div class="line">        fileReader.readAsDataURL(file)</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、基本页面结构（H5新标签）&quot;&gt;&lt;a href=&quot;#一、基本页面结构（H5新标签）&quot; class=&quot;headerlink&quot; title=&quot;一、基本页面结构（H5新标签）&quot;&gt;&lt;/a&gt;一、基本页面结构（H5新标签）&lt;/h3&gt;&lt;p&gt;页头：&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Touch事件</title>
    <link href="http://yoursite.com/2016/05/23/%E7%A7%BB%E5%8A%A8%E7%AB%AFTouch%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/05/23/移动端Touch事件/</id>
    <published>2016-05-23T05:33:40.000Z</published>
    <updated>2017-02-09T05:59:56.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、与PC端事件的差异对比"><a href="#一、与PC端事件的差异对比" class="headerlink" title="一、与PC端事件的差异对比"></a>一、与PC端事件的差异对比</h3><p>1.PC端的mousemove、mouseup、mousedown等事件，在移动端会失效(或者使用不正常)<br>2.PC端的click事件可以使用，但是会有300ms的延迟问题</p>
<p>  300ms的延迟问题：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.click事件在移动手机开发中会有300ms的延迟问题，因为在手机早期，浏览器有大和缩小的功能，  </div><div class="line">     用户在屏幕上点击两次之后，浏览器会触发放大或缩小的功能，因此浏览器做了一个处理，当触摸一  </div><div class="line">     次后，在300ms这段时间内有没有触摸第二次，如果触摸了第二次，说明是触发放大或缩小功能，否  </div><div class="line">     则的话就是click事件，  因此在click  的时候，用户必须等待300ms之后才会触发click事件。所  </div><div class="line">     以当在移动端使用click事件的时候，会感觉到300ms的迟钝。</div><div class="line">     </div><div class="line">2.在实际应用中发现，300ms并不是绝对发生，当用户设置了viewport并禁止缩放时，大部分浏览器  </div><div class="line">会禁止300ms延迟，但在低版本安卓以及微信，qq等应用的内嵌webview中仍然会发生300ms延迟问题</div></pre></td></tr></table></figure>
<h3 id="二、移动端手势事件"><a href="#二、移动端手势事件" class="headerlink" title="二、移动端手势事件"></a>二、移动端手势事件</h3><p>1.touchstart : 手指按下的时候触发  </p>
<p>2.touchmove :手指移动的时候触发  </p>
<p>3.touchend ： 手指离开时触发  </p>
<p>4.touchcancel : 事件被打断的时候触发(来电话等)  </p>
<p>5.事件的执行顺序：  </p>
<p>touchstart——touchmove——touchend——click</p>
<h3 id="三、-Touch"><a href="#三、-Touch" class="headerlink" title="三、 Touch"></a>三、 Touch</h3><p>Touch对象代表一个触点，可以通过event.touches[0]获取，每个触点包含位置，大小，形状，压力大小，和目标 element属性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    screenX: 511, </div><div class="line">    screenY: 400,//触点相对于屏幕左边沿的Y坐标</div><div class="line">    clientX: 244.37899780273438, </div><div class="line">    clientY: 189.3820037841797,//相对于可视区域</div><div class="line">    pageX: 244.37, </div><div class="line">    pageY: 189.37,//相对于HTML文档顶部，当页面有滚动的时候与clientX=Y 不等</div><div class="line">    force: 1,//压力大小，是从0.0(没有压力)到1.0(最大压力)的浮点数</div><div class="line">    identifier: 1036403715,//一次触摸动作的唯一标识符</div><div class="line">    radiusX: 37.565673828125, //能够包围用户和触摸平面的接触面的最小椭圆的水平轴(X轴)半径</div><div class="line">    radiusY: 37.565673828125,</div><div class="line">    rotationAngle: 0,//它是这样一个角度值：由radiusX 和 radiusY 描述的正方向的椭圆，需要通过顺时针旋转这个角度值，才能最精确地覆盖住用户和触摸平面的接触面</div><div class="line">    target: &#123;&#125; // 此次触摸事件的目标element</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="identifier"><a href="#identifier" class="headerlink" title="identifier"></a>identifier</h5><p>这个属性大家可能有疑惑，使用 Chrome 的模拟器发现多次触摸动作，值始终不变。用真机测试则不会有问题(我这里用的safari连接mac调试)。每次触摸包括start,move,end这整个过程，标志符都不变。下一次触摸动作开始，标志符就会变化。</p>
<h5 id="screenY-clientY"><a href="#screenY-clientY" class="headerlink" title="screenY clientY"></a>screenY clientY</h5><p>在 safari 中 screenY与clientY值是相等的，在iOS微信中两个数值不等，但单位应该也不一样。</p>
<h5 id="radiusX-radiusY-rotationAngle"><a href="#radiusX-radiusY-rotationAngle" class="headerlink" title="radiusX radiusY rotationAngle"></a>radiusX radiusY rotationAngle</h5><p>测试过程中safari及微信内置浏览器都不支持这些属性，chrome模拟器可以。</p>
<h5 id="TouchList"><a href="#TouchList" class="headerlink" title="TouchList"></a>TouchList</h5><p>由Touch对象构成的数组，通过event.touches取到。一个Touch对象代表一个触点，当有多个手指触摸屏幕时，TouchList就会存储多个Touch对象，前面说到的identifier就用来区分每个手指对应的Touch对象。</p>
<h5 id="TouchEvent"><a href="#TouchEvent" class="headerlink" title="TouchEvent"></a>TouchEvent</h5><p>TouchEvent就是用来描述手指触摸屏幕的状态变化事件，除了一般DOM事件中event对像具备的属性，还有一些特有的属性</p>
<h5 id="touches"><a href="#touches" class="headerlink" title="touches"></a>touches</h5><p>一个TouchList对象，包含当前所有接触屏幕的触点的Touch对象，不论 touchstart 事件从哪个elment上触发。</p>
<h5 id="targetTouches"><a href="#targetTouches" class="headerlink" title="targetTouches"></a>targetTouches</h5><p>也是一个TouchList对象，包含了如下触点的 Touch 对象：touchstart从当前事件的目标element上触发</p>
<h5 id="changedTouches"><a href="#changedTouches" class="headerlink" title="changedTouches"></a>changedTouches</h5><p>也是一个 TouchList 对象，对于 touchstart 事件, 这个 TouchList 对象列出在此次事件中新增加的触点。对于 touchmove 事件，列出和上一次事件相比较，发生了变化的触点。对于 touchend ，列出离开触摸平面的触点（这些触点对应已经不接触触摸平面的手指）。</p>
<p>touchend这里要特别注意，touches和targetTouches只存储接触屏幕的触点，要获取触点最后离开的状态要使用changedTouches。</p>
<h3 id="四、做一个touch事件库"><a href="#四、做一个touch事件库" class="headerlink" title="四、做一个touch事件库"></a>四、做一个touch事件库</h3><p>只是练习原理，其中还有很多不全面，可以使用第三方库来实现效果   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var query = <span class="keyword">function</span>(selector)&#123;</div><div class="line">    //一开始调用$(选择器)就是需要执行init方法，因为需要得到元素才可以做下面的操作，所以这样的话就必须使用链式调用的样子，返回出来this对象</div><div class="line">    //其实本来方法中this都是指query.fn的对象，因为是执行了init方法后直接调用了tap方法，所以tap里面的this应该是指向调用者，就是init返回出来的值，</div><div class="line">    //但是又是query.fn对象的方法，所以需要返回出来this才能继续下面的方法调用，如果直接返回元素，就没有tap方法了，也就调用不了</div><div class="line">        <span class="built_in">return</span> query.fn.init(selector);</div><div class="line">    &#125;</div><div class="line">    query.fn = query.prototype = &#123;</div><div class="line">    //初始化方法</div><div class="line">    init:<span class="keyword">function</span>(selector)&#123;</div><div class="line">        <span class="keyword">if</span>(typeof selector == <span class="string">'string'</span>)&#123;</div><div class="line">            this.element = document.querySelector(selector);</div><div class="line">            <span class="built_in">return</span> this;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //单击事件</div><div class="line">    tap:<span class="keyword">function</span>(handler)&#123;</div><div class="line">        this.element.addEventListener(<span class="string">"touchstart"</span>,touchFn);</div><div class="line">        this.element.addEventListener(<span class="string">"touchend"</span>,touchFn);</div><div class="line">        //声明按下时间和结束时间（用来判断是否是合理的单击操作）</div><div class="line">        var startTime,endTime;</div><div class="line">        //事件触发函数</div><div class="line">        <span class="keyword">function</span> touchFn(e)&#123;</div><div class="line">            switch (e.type)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"touchstart"</span>:</div><div class="line">                //记录按下时间</div><div class="line">                startTime = new Date().getTime();</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"touchend"</span> :</div><div class="line">                //记录结束时间</div><div class="line">                endTime = new Date().getTime();</div><div class="line">                <span class="keyword">if</span>(endTime - startTime &lt;= 400)&#123;</div><div class="line">                    //回调</div><div class="line">                    handler();</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">#### //双击   </span></div><div class="line">    </div><div class="line">    doubleTap:<span class="keyword">function</span>(handler)&#123;</div><div class="line">        this.element.addEventListener(<span class="string">'touchstart'</span>,dbltouchFn);</div><div class="line">            this.element.addEventListener(<span class="string">'touchend'</span>,dbltouchFn);</div><div class="line">            var count = 0;</div><div class="line">            var timerId;</div><div class="line">            <span class="keyword">function</span> dbltouchFn(e)&#123;</div><div class="line">                switch (e.type)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"touchstart"</span>:</div><div class="line">                    count++;</div><div class="line">                    clearTimeout(timerId);</div><div class="line">                    timerId = <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                        count = 0;</div><div class="line">                    &#125;,300)</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"touchend"</span> :</div><div class="line">                    //记录结束时间</div><div class="line">                    endTime = new Date().getTime();</div><div class="line">                    <span class="keyword">if</span>(count == 2)&#123;</div><div class="line">                        //回调</div><div class="line">                        handler();</div><div class="line">                        count=0;</div><div class="line">                    &#125;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">#### //长按</span></div><div class="line">    longTap:<span class="keyword">function</span>(handler)&#123;</div><div class="line">        this.element.addEventListener(<span class="string">"touchstart"</span>,touchFn);</div><div class="line">        this.element.addEventListener(<span class="string">"touchend"</span>,touchFn);</div><div class="line">        this.element.addEventListener(<span class="string">"touchmove"</span>,touchFn);</div><div class="line">        //事件触发函数</div><div class="line">        <span class="keyword">function</span> touchFn(e)&#123;</div><div class="line">            switch (e.type)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"touchstart"</span>:</div><div class="line">            //按下500ms后才算是长按，执行回调函数</div><div class="line">            timerId = <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                handler();</div><div class="line">            &#125;,500)</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"touchend"</span> :</div><div class="line">                clearTimeout(timerId)</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"touchmove"</span> :</div><div class="line">                clearTimeout(timerId)</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">#### //左滑事件</span></div><div class="line">    swiperLeft:<span class="keyword">function</span>(handler)&#123;</div><div class="line">        this.element.addEventListener(<span class="string">"touchstart"</span>,touchFn);</div><div class="line">        this.element.addEventListener(<span class="string">"touchend"</span>,touchFn);</div><div class="line">        //声明坐标变量</div><div class="line">        var startX,startY,endX,endY;</div><div class="line">        <span class="keyword">function</span> touchFn(e)&#123;</div><div class="line">            switch (e.type)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"touchstart"</span>:</div><div class="line">                startX = e.targetTouches[0].pageX;</div><div class="line">                startY = e.targetTouches[0].pageY;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"touchend"</span> :</div><div class="line">                endX = e.changedTouches[0].pageX;</div><div class="line">                endY = e.changedTouches[0].pageY;</div><div class="line">                //1.判断是上下滑动还是左右滑动</div><div class="line">                //2.判断是左还是右(阈值);</div><div class="line">                <span class="keyword">if</span>(Math.abs(endX - startX) &gt;= Math.abs(endY - startY) &amp;&amp; ((startX - endX) &gt; 40))&#123;</div><div class="line">                    handler();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    query.fn.init.prototype = query.fn;  </div><div class="line">    window.$ = window.query = query;  </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、与PC端事件的差异对比&quot;&gt;&lt;a href=&quot;#一、与PC端事件的差异对比&quot; class=&quot;headerlink&quot; title=&quot;一、与PC端事件的差异对比&quot;&gt;&lt;/a&gt;一、与PC端事件的差异对比&lt;/h3&gt;&lt;p&gt;1.PC端的mousemove、mouseup、mo
    
    </summary>
    
      <category term="移动端" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>AngularJs</title>
    <link href="http://yoursite.com/2016/02/08/AngularJs/"/>
    <id>http://yoursite.com/2016/02/08/AngularJs/</id>
    <published>2016-02-08T04:20:16.000Z</published>
    <updated>2017-02-08T07:45:25.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Angular简介"><a href="#一、Angular简介" class="headerlink" title="一、Angular简介"></a>一、Angular简介</h3><h5 id="1-Angular是什么"><a href="#1-Angular是什么" class="headerlink" title="1.Angular是什么?"></a>1.Angular是什么?</h5><p>为动态web应用设计的结构框架</p>
<h5 id="2-为什么要使用"><a href="#2-为什么要使用" class="headerlink" title="2.为什么要使用?"></a>2.为什么要使用?</h5><p>(1)angularJS是一个单页应用(SPA)框架<br>(2)前后端分离，后端只提供数据接口，路由，模板渲染在前端完成<br>(3)HTML和JS分离，展示和逻辑分离<br>(4)减少JS代码，减少DOM元素查找，事件绑定等代码<br>(5)适合API开发  </p>
<h3 id="二、Angular核心特性功能"><a href="#二、Angular核心特性功能" class="headerlink" title="二、Angular核心特性功能"></a>二、Angular核心特性功能</h3><h6 id="1-双向数据绑定"><a href="#1-双向数据绑定" class="headerlink" title="(1)双向数据绑定"></a>(1)双向数据绑定</h6><p>实现了view和model完全绑定了在一起，model变化，view也变化，反之亦然。</p>
<h6 id="2-模板"><a href="#2-模板" class="headerlink" title="(2)模板"></a>(2)模板</h6><p>模板相当于HTML文件被浏览器解析到DOM中，AngularJS遍历这些DOM，AngularJS把模板当做DOM来操作，去生成一些指令来完成对view的数据绑定</p>
<h6 id="3-MVC"><a href="#3-MVC" class="headerlink" title="(3)MVC"></a>(3)MVC</h6><p>Model-View-Controller(模型-视图-控制器)<br><strong>1、为什么需要MVC?</strong><br>(1)代码规模越来越大，需要将不同的系统功能切分成不同的模块（JS文件），这样有助于让不同的开发人员去实现，简单来说就是切分职责是大势所趋；<br>(2)为了复用公共的模块——很多模块的逻辑是一模一样的；<br>(3)为了后期维护的方便——修改一切功能不影响其他功能。</p>
<p>MVC只是手段，终极目标是模块化和复用！！！要学会区分手段和目的。<br><strong>2、前端MVC的困难在哪里？</strong><br><img src="http://img.mukewang.com/576df8660001e9d809350483.png" alt="image"></p>
<p>如上图所示，首先浏览器内部会加载JS脚本，然后进行JIT编译执行，在这执行过程中，会给我们带来如上图右边的一些常见的困难：</p>
<p>(1)如DOM的操作会受到浏览器加载影响——浏览器在加载脚本时，不同的浏览器会有不同的实现方式，包括加载的顺序以及并发的线程数量都是有不同的；<br>(2)如果模块之间出现依赖关系（JS文件依赖），JS并没有为我们提供现成的解决工具，需要自己手工去解决；<br>(3)JS本身的语言机制，例如原型继承，也没有像其他语言有现成的继承工具，需要自己去模拟继承去完成想要的效果；</p>
<p>以上，是所有以JS为基础开发的框架都会面临的问题</p>
<p><strong>3、AngularJS语境下的MVC是如何实现的?</strong>  </p>
<h6 id="控制器——Controller"><a href="#控制器——Controller" class="headerlink" title="控制器——Controller"></a>控制器——Controller</h6><p><strong>常见的MVC——controller的实现方式1：</strong><br>控制器和视图进行双向交互，和数据模型也进行双向交互，但视图和模型之间没有双向交互，我们会把多个视图的逻辑控制都放在同一个控制器内，对于小型项目还好，但没办法应对大型项目。<br><img src="http://img.mukewang.com/576df8740001fbbe07550424.png" alt="image"><br><strong>MVC——controller的实现方式2：</strong><br>改进：一个控制器只跟一个视图进行双向交互，两个视图共用同个数据模型只需在对应的的控制器里管理就好<br>问题：如果两个视图的控制器里面出现相同的内容，该如何管理？<br><img src="http://img.mukewang.com/576df89300010ef007470423.png" alt="image"><br>改进：将公共的部分抽出，生成一个通用控制器，然后继承这个通用控制器，但通常在AngularJS中不建议这样做<br><img src="http://img.mukewang.com/576df8a700016fdd07540424.png" alt="image"><br>正确的打开方式是：<br>将通用的部分抽成一个Service,让控制器去调用。<br><img src="http://img.mukewang.com/576e03e70001306b07460384.png" alt="image"><br>Controller使用过程中的注意点（使用原则）：</p>
<p>(1)不要试图去复用Controller,一个控制器一般只负责一小块视图——AngularJS的Controller通常处理的是业务逻辑；<br>(2)不要在Controller中操作DOM，这不是控制器的职责——有封装好的操作DOM的机制Directive；<br>(3)不要在Controller里面做数据格式化，ng有很好用的表单控件；<br>(4)不要在Controller里面做数据过滤操作,ng有$fliter服务；<br>(5)一般来说，Controller是不会相互调用的，控制器之间的交互会通过事件进行。  </p>
<h6 id="模型——model"><a href="#模型——model" class="headerlink" title="模型——model"></a>模型——model</h6><p>AngularJS中使用指令ng-model来生成数据模型，通常是绑定在$scope对象上实现。<br>是指从服务器中获取的数据，在任何UI上看到的数据都是从模型或者其子模型中获取的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Your name: &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> ng-model=<span class="string">"yourname"</span> placeholder=<span class="string">"World"</span>&gt;</div><div class="line">        &lt;hr&gt;</div><div class="line">        Hello &#123;&#123;yourname || <span class="string">'World'</span>&#125;&#125;!</div></pre></td></tr></table></figure></p>
<p><strong>模型和控制器</strong></p>
<p>在PhoneListCtrl控制器里面初始化了数据模型（这里只不过是一个包含了数组的函数，数组中存储的对象是手机数据列表）：</p>
<p>app/js/controller.js:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> PhoneListCtrl(<span class="variable">$scope</span>) &#123;</div><div class="line">  <span class="variable">$scope</span>.phones = [</div><div class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Nexus S"</span>,</div><div class="line">     <span class="string">"snippet"</span>: <span class="string">"Fast just got faster with Nexus S."</span>&#125;,</div><div class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Motorola XOOM™ with Wi-Fi"</span>,</div><div class="line">     <span class="string">"snippet"</span>: <span class="string">"The Next, Next Generation tablet."</span>&#125;,</div><div class="line">    &#123;<span class="string">"name"</span>: <span class="string">"MOTOROLA XOOM™"</span>,</div><div class="line">     <span class="string">"snippet"</span>: <span class="string">"The Next, Next Generation tablet."</span>&#125;</div><div class="line">  ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽管控制器看起来并没有起到什么控制的作用，但是它在这里起到了至关重要的作用。通过给定我们数据模型的语境，控制器允许我们建立模型和视图之间的数据绑定。我们是这样把表现层，数据和逻辑部件联系在一起的：  </p>
<p>PhoneListCtrl——控制器方法的名字（在JS文件controllers.js中）和<body>标签里面的ngController指令的值相匹配。<br>    手机的数据此时与注入到我们控制器函数的作用域（$scope）相关联。当应用启动之后，会有一个根作用域被创建出来，而控制器的作用域是根作用域的一个典型后继。这个控制器的作用域对所有<body ng-controller="PhoneListCtrl">标记内部的数据绑定有效。  </body></body></p>
<p>AngularJS的作用域理论非常重要：一个作用域可以视作模板、模型和控制器协同工作的粘接器。AngularJS使用作用域，同时还有模板中的信息，数据模型和控制器。这些可以帮助模型和视图分离，但是他们两者确实是同步的！任何对于模型的更改都会即时反映在视图上；任何在视图上的更改都会被立刻体现在模型中。</p>
<h6 id="视图——view"><a href="#视图——view" class="headerlink" title="视图——view"></a>视图——view</h6><p>可以浏览和使用的UI界面</p>
<h6 id="4-依赖注入"><a href="#4-依赖注入" class="headerlink" title="(4)依赖注入"></a>(4)依赖注入</h6><p>拥有内建的依赖注入子系统，可以帮助开发人员更容易的开发，理解和测试应用<br><img src="http://img.mukewang.com/583bd3ad0001b84c11520720.jpg" alt="image"></p>
<p>概念： Dependency Injection 简称DI 是一种软件设计模式<br>一个或多个的依赖注入到一个独立的对象中，然后成为该客户端的一部分  </p>
<h6 id="1、推断式注入"><a href="#1、推断式注入" class="headerlink" title="1、推断式注入"></a>1、推断式注入</h6><p>缺点：不利于压缩<br><img src="http://img.mukewang.com/5829156f0001077312800720.jpg" alt="image"></p>
<p>可以用来创建自定义标签，也可以用来装饰元素，操作DOM属性  </p>
<h6 id="2、声明式注入-标注式注入"><a href="#2、声明式注入-标注式注入" class="headerlink" title="2、声明式注入/标注式注入"></a>2、声明式注入/标注式注入</h6><p>利用$inject<br><img src="http://img.mukewang.com/57bd102c00015ee312800720.jpg" alt="image"></p>
<h6 id="3、内联式注入"><a href="#3、内联式注入" class="headerlink" title="3、内联式注入"></a>3、内联式注入</h6><p>这样的话方法的名称没必要和需要注入的东西一模一样，这样使用压缩工具后也不会报错<br><img src="http://img.mukewang.com/57e4a00e000160a212800720.jpg" alt="image"></p>
<p><img src="http://img.mukewang.com/57ff23a60001af7a12800720.jpg" alt="image"></p>
<h6 id="AngularJS-提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入："><a href="#AngularJS-提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：" class="headerlink" title="AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入："></a>AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">value</div><div class="line">factory</div><div class="line">service</div><div class="line">provider</div><div class="line">constant</div></pre></td></tr></table></figure>
<p>provider是基础，其他的都要调用provider，可以通过源码看到：</p>
<p><img src="http://img.mukewang.com/57e3a91700013df112800720.jpg" alt="image"><br><strong>(1)provider</strong><br>provide中提供一个$get方法，用于返回value/service/factory</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 定义一个模块</div><div class="line">var mainApp = angular.module(<span class="string">"mainApp"</span>, []);</div><div class="line">...</div><div class="line">// 使用 provider 创建 service 定义一个方法用于计算两数乘积</div><div class="line">mainApp.config(<span class="keyword">function</span>(<span class="variable">$provide</span>) &#123;</div><div class="line">   <span class="variable">$provide</span>.provider(<span class="string">'MathService'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">      this.<span class="variable">$get</span> = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">         var factory = &#123;&#125;;  </div><div class="line">         factory.multiply = <span class="keyword">function</span>(a, b) &#123;</div><div class="line">            <span class="built_in">return</span> a * b; </div><div class="line">         &#125;</div><div class="line">         <span class="built_in">return</span> factory;</div><div class="line">      &#125;;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>(2)factory</strong><br>factory 是一个函数用于返回值。在 service 和 controller 需要时创建。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 定义一个模块</div><div class="line">var mainApp = angular.module(<span class="string">"mainApp"</span>, []);</div><div class="line"></div><div class="line">// 创建 factory <span class="string">"MathService"</span> 用于两数的乘积 provides a method multiply to <span class="built_in">return</span> multiplication of two numbers</div><div class="line">mainApp.factory(<span class="string">'MathService'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">   var factory = &#123;&#125;;</div><div class="line">   </div><div class="line">   factory.multiply = <span class="keyword">function</span>(a, b) &#123;</div><div class="line">      <span class="built_in">return</span> a * b</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">return</span> factory;</div><div class="line">&#125;); </div><div class="line"></div><div class="line">// 在 service 中注入 factory <span class="string">"MathService"</span></div><div class="line">mainApp.service(<span class="string">'CalcService'</span>, <span class="keyword">function</span>(MathService)&#123;</div><div class="line">   this.square = <span class="keyword">function</span>(a) &#123;</div><div class="line">      <span class="built_in">return</span> MathService.multiply(a,a);</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line">...</div></pre></td></tr></table></figure>
<p><strong>(3)service</strong><br>服务十一分单一的JS包含了一组函数对象来执行某些任务，经常用服务去处理数据请求</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//通过service创建一个数据请求服务</div><div class="line">// 注意：服务里不能用<span class="variable">$scope</span></div><div class="line">app.service(<span class="string">'HTTPProcuctService'</span>, <span class="keyword">function</span> (<span class="variable">$http</span>) &#123;</div><div class="line">	<span class="built_in">return</span> &#123;</div><div class="line">		//获取slide和菜单项数据接口</div><div class="line">		loadSliderAndMenuData : <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">			<span class="built_in">return</span> <span class="variable">$http</span>.get(<span class="string">"http://www.vrserver.applinzi.com/aixianfeng/apihome.php"</span>);</div><div class="line">		&#125;,</div><div class="line">		//获取hot商品列表</div><div class="line">		loadHotProductData : <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">			<span class="built_in">return</span> <span class="variable">$http</span>.get(<span class="string">"http://www.vrserver.applinzi.com/aixianfeng/apihomehot.php"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>(4)value</strong><br>value是一个简单的JavaScript对象，用于向控制器传递值(配置阶段)；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 定义一个模块</div><div class="line">var mainApp = angular.module(<span class="string">"mainApp"</span>, []);</div><div class="line"></div><div class="line">// 创建 value 对象 <span class="string">"defaultInput"</span> 并传递数据</div><div class="line">mainApp.value(<span class="string">"defaultInput"</span>, 5);</div><div class="line">...</div><div class="line"></div><div class="line">// 将 <span class="string">"defaultInput"</span> 注入到控制器</div><div class="line">mainApp.controller(<span class="string">'CalcController'</span>, <span class="keyword">function</span>(<span class="variable">$scope</span>, CalcService, defaultInput) &#123;</div><div class="line">   <span class="variable">$scope</span>.number = defaultInput;</div><div class="line">   <span class="variable">$scope</span>.result = CalcService.square(<span class="variable">$scope</span>.number);</div><div class="line">   </div><div class="line">   <span class="variable">$scope</span>.square = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">      <span class="variable">$scope</span>.result = CalcService.square(<span class="variable">$scope</span>.number);</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>(5)constant</strong><br>constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainApp.constant(<span class="string">"configParam"</span>, <span class="string">"constant value"</span>);</div></pre></td></tr></table></figure></p>
<h6 id="5-指令"><a href="#5-指令" class="headerlink" title="(5)指令"></a>(5)指令</h6><p>1、Angular指令<br>AngularJS 指令是扩展的 HTML 属性，带有前缀 ng-。<br>ng-app 指令初始化一个 AngularJS 应用程序。<br>ng-init 指令初始化应用程序数据。<br>ng-model 指令把元素值（比如输入域的值）绑定到应用程序。<br>ng-repeat 指令会重复一个 HTML 元素：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-app=<span class="string">""</span> ng-init=<span class="string">"names=['Jani','Hege','Kai']"</span>&gt;</div><div class="line">  &lt;p&gt;使用 ng-repeat 来循环数组&lt;/p&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    &lt;li ng-repeat=<span class="string">"x in names"</span>&gt;</div><div class="line">      &#123;&#123; x &#125;&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>2、自定义指令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">// 注意：如果自定义指令包含大写字母的话，</div><div class="line">//			使用的时候需要用-分割开，例如xiaoXue 对应 xiao-xue</div><div class="line">app.directive(<span class="string">'xiaoXue'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">    	//这个属性不设置的话，默认：标签和属性形式生效，</div><div class="line">    	//设置后，设置哪个就哪个生效</div><div class="line">    	restrict : <span class="string">'A'</span>,</div><div class="line">    	//replace : <span class="literal">true</span> 会把替换掉当前页面的元素，</div><div class="line">    	//如果使用注释形式的话，必须设置这个属性</div><div class="line">    	replace : <span class="literal">true</span>,</div><div class="line">        //template : <span class="string">"&lt;h1&gt;我是自定义H1&lt;/h1&gt;"</span></div><div class="line">        //也可以链接一个页面地址 注意：一定要是纯页面，不能有注释和脚本</div><div class="line">    	templateUrl : <span class="string">"../footer.html"</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://img.mukewang.com/583fd3ad0001235812800720.jpg" alt="image"><br><img src="http://img.mukewang.com/5842d3be0001487712800720.jpg" alt="image"><br>调用属性方法<br><img src="http://img.mukewang.com/5835a06d0001883412800720.jpg" alt="image"></p>
<h3 id="三、angular过滤器"><a href="#三、angular过滤器" class="headerlink" title="三、angular过滤器"></a>三、angular过滤器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;body ng-app=<span class="string">""</span>&gt;</div><div class="line">	&lt;div ng-init=<span class="string">"str='abcde'; money=12345"</span>&gt;</div><div class="line">		&lt;h1&gt;货币格式化处理（currency）&lt;/h1&gt;</div><div class="line">		&lt;!-- 默认是美元 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; money | currency &#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;!-- 可以自定义任何货币 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; money | currency : <span class="string">"RMB￥"</span> &#125;&#125;&lt;/h2&gt;</div><div class="line">		</div><div class="line">		&lt;h1&gt;字母大小写格式处理&lt;/h1&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; str | uppercase &#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; <span class="string">"ABC"</span> | lowercase &#125;&#125;&lt;/h2&gt;</div><div class="line">		</div><div class="line">		&lt;h1&gt;限制字符串或数组的长度&lt;/h1&gt;</div><div class="line">		&lt;!-- 限制字符串的长度 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; str | <span class="built_in">limit</span>To : 3 | uppercase&#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;!-- 限制数组的长度--&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; ([33, 44, 22, 55] | <span class="built_in">limit</span>To : 2)[1] &#125;&#125;&lt;/h2&gt;</div><div class="line">		</div><div class="line">		&lt;h1&gt;给数字设置千分位&lt;/h1&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; 1234567 | number &#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;!-- 设置参数就可以保留小数 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; 1234567 | number : 2 &#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;!-- 是四舍五入的 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; 1234567.996 | number : 2 &#125;&#125;&lt;/h2&gt;</div><div class="line">		</div><div class="line">		&lt;h1&gt;日期格式化处理&lt;/h1&gt;</div><div class="line">		&lt;!--&#123;&#123;date (毫秒数) | date : <span class="string">'yyyy-MM-dd hh:mm:ss EEEE'</span>&#125;&#125;--&gt;</div><div class="line">		&lt;!-- 格式化可以自定义 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; 1481076346614 | date : <span class="string">'yyyy年-MM月-dd日 hh:mm:ss EEEE'</span>&#125;&#125;&lt;/h2&gt;</div><div class="line">		</div><div class="line">		&lt;h1 ng-init=<span class="string">"arr=[33, 22, 44, 55];</span></div><div class="line">			persons=[&#123;name:'b', age:18&#125;,</div><div class="line">					&#123;name:'a', age:20&#125;,</div><div class="line">					&#123;name:'c', age:17&#125;,</div><div class="line">					&#123;name:'ca', age:16&#125;,</div><div class="line">					&#123;name:'cb', age:18&#125;,</div><div class="line">					&#123;name:'ab', age:28&#125;]"&gt;</div><div class="line">			排序（将来用作于接口返回数据后的前端排序）</div><div class="line">		&lt;/h1&gt;</div><div class="line">		&lt;!-- 普通数组排序 默认是升序 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; arr | orderBy &#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;!-- 降序的话需要加入参数是 order:<span class="literal">true</span> --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; arr | orderBy : order : <span class="literal">true</span> &#125;&#125;&lt;/h2&gt;</div><div class="line">		</div><div class="line">		&lt;!-- 数组中有对象，按照对象的某个属性去排序 --&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; persons | orderBy : <span class="string">'age'</span> &#125;&#125;&lt;/h2&gt;</div><div class="line">		&lt;h2&gt;&#123;&#123; persons | orderBy : <span class="string">'age'</span> : <span class="literal">true</span> &#125;&#125;&lt;/h2&gt;</div><div class="line">		</div><div class="line">		&lt;!-- 在ng-repeat中使用 --&gt;</div><div class="line">		&lt;ul&gt;</div><div class="line">			&lt;li ng-repeat=<span class="string">"person in persons | orderBy : 'age'"</span>&gt;</div><div class="line">				&#123;&#123; person.age &#125;&#125; === &#123;&#123; person.name &#125;&#125;</div><div class="line">			&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">		</div><div class="line">		&lt;!-- 排序小功能 --&gt;</div><div class="line">		条件过滤：</div><div class="line">		&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> ng-model=<span class="string">"queryFilter"</span> /&gt;</div><div class="line">		排序条件：</div><div class="line">		&lt;select ng-model=<span class="string">"orderType"</span>&gt;</div><div class="line">			&lt;option value=<span class="string">"name"</span>&gt;按照名字排序&lt;/option&gt;</div><div class="line">			&lt;option value=<span class="string">"age"</span>&gt;按照年龄排序&lt;/option&gt;</div><div class="line">		&lt;/select&gt;</div><div class="line">		&lt;ul&gt;</div><div class="line">			&lt;li ng-repeat=<span class="string">"person in persons | filter : queryFilter</span></div><div class="line">				 | orderBy : orderType"&gt;</div><div class="line">				&#123;&#123; person.age &#125;&#125; === &#123;&#123; person.name &#125;&#125;</div><div class="line">			&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h3 id="四、angular内置服务"><a href="#四、angular内置服务" class="headerlink" title="四、angular内置服务"></a>四、angular内置服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">    .controller(<span class="string">'ctrl'</span>, <span class="keyword">function</span> (<span class="variable">$scope</span>, <span class="variable">$timeout</span>, <span class="variable">$location</span>, <span class="variable">$http</span>) &#123;</div><div class="line">    <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        <span class="variable">$scope</span>.name = <span class="string">"小雪"</span>;</div><div class="line">        alert(<span class="variable">$scope</span>.name);</div><div class="line">    &#125;, 2000);</div><div class="line">    <span class="variable">$timeout</span>(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    	<span class="variable">$scope</span>.name = <span class="string">"小雪"</span>;</div><div class="line">    &#125;, 2000);</div><div class="line">    console.log(<span class="variable">$location</span>);</div><div class="line">    console.log(<span class="variable">$location</span>.absUrl());</div><div class="line">    console.log(<span class="variable">$location</span>.protocol());</div><div class="line">    console.log(<span class="variable">$location</span>.host());</div><div class="line">    console.log(<span class="variable">$location</span>.port());</div><div class="line">    <span class="variable">$http</span>.get(<span class="string">"http://www.vrserver.applinzi.com/aixianfeng/apihome.php"</span>)</div><div class="line">    	.success(<span class="keyword">function</span> (data) &#123;</div><div class="line">    		console.log(data);</div><div class="line">    	&#125;);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    .controller(<span class="string">'ctrl2'</span>, <span class="keyword">function</span> (<span class="variable">$scope</span>, <span class="variable">$interval</span>) &#123;</div><div class="line">    	<span class="variable">$scope</span>.count = 0;</div><div class="line">    	var timerId = <span class="variable">$interval</span>(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    		<span class="variable">$scope</span>.count++;</div><div class="line">    		<span class="keyword">if</span> (<span class="variable">$scope</span>.count == 5) &#123;</div><div class="line">    			<span class="variable">$interval</span>.cancel(timerId);</div><div class="line">    		&#125;</div><div class="line">    	&#125;, 1000);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h3 id="五、angular监听"><a href="#五、angular监听" class="headerlink" title="五、angular监听"></a>五、angular监听</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">    app.controller(<span class="string">'ctrl'</span>, <span class="keyword">function</span> (<span class="variable">$scope</span>) &#123;</div><div class="line">    	<span class="variable">$scope</span>.count = 0;	</div><div class="line">    		</div><div class="line">    	<span class="variable">$scope</span>.btnFn = <span class="keyword">function</span> (e) &#123;</div><div class="line">    		e.stopPropagation();</div><div class="line">    		<span class="variable">$scope</span>.count++;</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	window.onclick = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    		<span class="variable">$scope</span>.<span class="variable">$apply</span>(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    			<span class="variable">$scope</span>.count++;	</div><div class="line">    		&#125;)</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	//只会监听到angular环境中对变量的改变，</div><div class="line">    	//不会去监听原生环境中对变量的改变</div><div class="line">    	<span class="variable">$scope</span>.<span class="variable">$watch</span>(<span class="string">'count'</span>, <span class="keyword">function</span> (newValue, oldValue) &#123;</div><div class="line">    		console.log(<span class="string">'old：'</span> + oldValue + <span class="string">"==="</span> + <span class="string">'new：'</span> + newValue);	</div><div class="line">    	&#125;)</div><div class="line">    	</div><div class="line">	<span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">   	    <span class="variable">$scope</span>.count++;</div><div class="line">	&#125;, 1000);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="六、angular路由"><a href="#六、angular路由" class="headerlink" title="六、angular路由"></a>六、angular路由</h3><p>1、载入了实现路由的 js 文件：angular-route.js。</p>
<p>2、包含了 ngRoute 模块作为主应用模块的依赖模块。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'routingDemoApp'</span>,[<span class="string">'ngRoute'</span>])</div></pre></td></tr></table></figure>
<p>3、使用 ngView 指令  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-view&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>该 div 内的 HTML 内容会根据路由的变化而变化。<br>4、配置 $routeProvider，AngularJS $routeProvider 用来定义路由规则。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">// 这里需要导入ngRoute模块 才可以使用路由功能</div><div class="line">// 导入angularCSS 可以关联样式</div><div class="line">var app = angular.module(<span class="string">'myApp'</span>, [<span class="string">'ngRoute'</span>, <span class="string">'angularCSS'</span>]);</div><div class="line">// 通过config方法来，依赖注入<span class="variable">$routeProvider</span>服务，</div><div class="line">// <span class="variable">$routeProvider</span>服务来配置路由规则</div><div class="line">app.config([<span class="string">'$routeProvider'</span>, <span class="keyword">function</span> (<span class="variable">$routeProvider</span>) &#123;</div><div class="line">	<span class="variable">$routeProvider</span></div><div class="line">		.when(<span class="string">'/home/:userName/:age'</span>, &#123;</div><div class="line">			templateUrl : <span class="string">"./views/home.html"</span>,</div><div class="line">			controller : <span class="keyword">function</span> (<span class="variable">$scope</span>, <span class="variable">$css</span>) &#123;</div><div class="line">				<span class="variable">$scope</span>.pageName = <span class="string">"这是home"</span>;</div><div class="line">				<span class="variable">$css</span>.add(<span class="string">'./css/home.css'</span>);</div><div class="line">			&#125;</div><div class="line">			controller : <span class="string">'homeCtrl'</span></div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">		.when(<span class="string">'/supermarket'</span>, &#123;</div><div class="line">			templateUrl : <span class="string">"./views/supermarket.html"</span>,</div><div class="line">			controller : <span class="string">'supermarketCtrl'</span></div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">		.when(<span class="string">'/cart'</span>, &#123;</div><div class="line">			templateUrl : <span class="string">"./views/cart.html"</span>,</div><div class="line">			controller : <span class="string">'cartCtrl'</span></div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">		.when(<span class="string">'/mine'</span>, &#123;</div><div class="line">			templateUrl : <span class="string">"./views/mine.html"</span>,</div><div class="line">			controller : <span class="string">'mineCtrl'</span></div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">		.when(<span class="string">'/productInfo/:productId'</span>, &#123;</div><div class="line">			templateUrl : <span class="string">"./views/productInfo.html"</span>,</div><div class="line">			controller : <span class="string">'productInfoCtrl'</span></div><div class="line">		&#125;)</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>template:  </p>
<p>如果我们只需要在 ng-view 中插入简单的 HTML 内容，则使用该参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.when(<span class="string">'/computers'</span>,&#123;template:<span class="string">'这是电脑分类页面'</span>&#125;)</div></pre></td></tr></table></figure>
<p>templateUrl:  </p>
<p>如果我们只需要在 ng-view 中插入 HTML 模板文件，则使用该参数：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$routeProvider</span>.when(<span class="string">'/computers'</span>, &#123;</div><div class="line">    templateUrl: <span class="string">'views/computers.html'</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>5.$route  </p>
<p>$route用于将控制器与视图相连，他观察$location.url(),并且尝试映射路径到一个已经存在的路由定义中，他依赖$location、$routeParams  </p>
<p>6.$routeParams</p>
<p>$routeParams允许你检索当前路由的参数  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!--router.js--&gt;</div><div class="line">.when(<span class="string">'/productInfo/:productId'</span>, &#123;</div><div class="line">	templateUrl : <span class="string">"./views/productInfo.html"</span>,</div><div class="line">	controller : <span class="string">'productInfoCtrl'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'productInfoCtrl'</span>, <span class="keyword">function</span> (<span class="variable">$scope</span>, <span class="variable">$routeParams</span>) &#123;</div><div class="line">//	<span class="variable">$scope</span>.a = <span class="variable">$routeParams</span>.productName;</div><div class="line">	<span class="variable">$scope</span>.b = <span class="variable">$routeParams</span>.productId;</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Angular简介&quot;&gt;&lt;a href=&quot;#一、Angular简介&quot; class=&quot;headerlink&quot; title=&quot;一、Angular简介&quot;&gt;&lt;/a&gt;一、Angular简介&lt;/h3&gt;&lt;h5 id=&quot;1-Angular是什么&quot;&gt;&lt;a href=&quot;#1-Ang
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>移动端布局</title>
    <link href="http://yoursite.com/2015/07/18/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2015/07/18/移动端布局/</id>
    <published>2015-07-18T08:20:20.000Z</published>
    <updated>2017-02-09T06:01:30.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、视口-viewport"><a href="#一、视口-viewport" class="headerlink" title="一、视口 viewport"></a>一、视口 viewport</h3><p>手机有不不同的分辨率，不不同的屏幕大小，如何使我们开发的应用或页<br>面大小能适合各种高端手机使用？<br>学习html5 viewport能帮助我们实现这一点。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">width=device-width    设置宽度为屏幕宽度</div><div class="line">maximum-scale=1.0     设置最大缩放比例0.25 — 10.0  </div><div class="line">minimum-scale=1.0</div><div class="line">设置最小缩放比例:不能小于初始化的比例0.25 — 10.0  </div><div class="line">user-scalable=no 禁止用户捏合  </div><div class="line">width=device-width  </div><div class="line">height=device-height  </div><div class="line">设置宽度为屏幕的宽度/设置⾼高度为屏幕的高度</div><div class="line">可以设置⼀一个固定的值 尽可能不不这样使用</div><div class="line">设置为设备的宽度： device-width  </div><div class="line">height是设置高度使用的，我们很少使用  </div><div class="line">initial-scale=1.0 设置初始化的缩放比例 </div><div class="line">maximum-scale=1.0  </div><div class="line">minimum-scale=1.0  </div><div class="line">设置最大缩放比和最小缩放比值的范围是0.25 ~ 10.0</div><div class="line">user-scalable=no  </div><div class="line">user-scalable=0  </div><div class="line">是否允许用户进行缩放网页  </div><div class="line">值</div><div class="line">yes(默认) / 1</div><div class="line">no / 0</div><div class="line">如果设置为no，</div><div class="line">那么minimax-scale和maximum-scale将被忽</div><div class="line">略，因为不不允许缩放</div></pre></td></tr></table></figure>
<p>所以一般我们可以复制这段到我们的项目中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=<span class="string">"viewport"</span>content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,uer-scalable=no"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="二、响应式布局"><a href="#二、响应式布局" class="headerlink" title="二、响应式布局"></a>二、响应式布局</h3><p>定义<br>为不不同屏幕分辨率定义不不同的布局使一个网站能兼容多个终端—而不不是为每个终端做一个特定的版本 这个概念是为了了解决移动互联网浏览而诞生的 。</p>
<p>为什什么需要？<br>响应式布局可以为不不同终端的用户提供更更加舒适的页面和更更好的用户体验<br>随着目前大屏幕移动设备的普及，可以用“大势所趋”来形容。</p>
<p>CSS3加入的媒体查询使得无需修改内容便便可以使样式应用于某些特定的设备范围  </p>
<p>作用 通过不不同的屏幕大小定义不不同的样式  </p>
<p>媒体查询的大部分媒介特性都接收min和max用于表达：大于或等于和小于或等于  </p>
<p>媒体类型 ：<br>screen 屏幕<br>print 打印机<br>默认为all，我们通常写screen<br>媒体属性<br>min-width<br>max-width<br>逻辑操作符and用来把多个媒体属性组合起来，合并到同一条媒体查询中    </p>
<p>样式表中内嵌@media  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">    	width: 100px;</div><div class="line">    	height: 100px;</div><div class="line">    	background: red;		</div><div class="line">    &#125;</div><div class="line"></div><div class="line">@media only screen and (min-width: 1000px) and (max-width: 1100px)&#123;</div><div class="line">	div &#123;</div><div class="line">		background: yellow;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在link中使用@media   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=“stylesheet” <span class="built_in">type</span>=“text/css” media=“only screen and (max-width: 480px)” href=“link.css”&gt;</div></pre></td></tr></table></figure>
<h3 id="三、多列布局"><a href="#三、多列布局" class="headerlink" title="三、多列布局"></a>三、多列布局</h3><p>简介：CSS多列列布局继承自块级布局模式，允许简单地定义多列文本  </p>
<p>当阅读文字的时候，从干一行末尾移动到下一行开始处，容易弄错读到了哪一行。<br>为了最优化使用大的显示屏幕，设计中应限制文字段落的宽度而并列列排布类似报纸   </p>
<p>使用 ：<br> 列数和宽度：  </p>
<p> 设置列数：      column-count  </p>
<p>设置每列列宽度 ：column-width  </p>
<p>columns ：column-count和column-width的简写,优先保证宽度，在宽度至少能达到指定宽度时，设置列列数  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">columns: 5;</div><div class="line">columns: 20em;</div><div class="line">columns: 12 8em;</div></pre></td></tr></table></figure>
<p>列间隙 ：列之间的间隙建议值为1em  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">column-gap</div><div class="line">column-gap: 2em;</div><div class="line">column-gap: 20px;</div></pre></td></tr></table></figure>
<p>优雅降级(浏览器器兼容性)：  </p>
<p>多列属性会被不支持多列模型的浏览器器忽略  </p>
<p>注意<br>不是所有的浏览器器都支持不带前缀的属性  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-moz-</div><div class="line">-webkit-</div></pre></td></tr></table></figure>
<p>写的时候最好写三次  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-columns: 3;</div><div class="line">-moz-columns: 3;</div><div class="line">columns: 3;</div></pre></td></tr></table></figure>
<p>列边框设置：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">column-rule-width：  </div><div class="line">                5px;  </div><div class="line">                thin 最窄  </div><div class="line">                medium 中等  </div><div class="line">                thick 最厚</div></pre></td></tr></table></figure>
<p>column-rule-color<br>column-rule-style 和border-style的值一样<br>column-rule 复合属性  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">column-rule: 2px solid cyan;</div></pre></td></tr></table></figure>
<p>跨列列 ：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">column-span all 指定元素跨越所有列</div></pre></td></tr></table></figure>
<h3 id="四、用户界面"><a href="#四、用户界面" class="headerlink" title="四、用户界面"></a>四、用户界面</h3><p>简介 在CSS3中，增加了一些新的用户界面特性来跳转元素尺寸，框尺寸和外边框。<br>1.resize :指定了某个元素是否可以由用户调整大小<br>使用时，需要添加 overflow: auto;<br>值<br>vertical 竖直方向<br>horizontal 水平方向<br>both 都<br>2.outline-offset   </p>
<p>轮廓相关属性 :<br>outline-width(2)<br>outline-style(2)<br>outline-color(2)<br>outline(2)  :轮廓特点 不占用空间<br>轮廓偏移值  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">outline-offset: 10px;</div></pre></td></tr></table></figure>
<p>3.text-overflow<br>当文本超出时，应该显示什么<br>值<br>ellipsis …<br>clip 直接被裁剪掉<br>配合属性<br>overflow: hidden;<br>white-space: no-wrap;    </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#div1 &#123;</span></div><div class="line">    	width: 100px;</div><div class="line">    	height: 100px;</div><div class="line">    	border: 1px solid red;</div><div class="line">    	overflow: auto;</div><div class="line">    	resize: horizontal;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">#p1 &#123;</span></div><div class="line">    	width: 8rem;</div><div class="line">    	border: 1px solid green;</div><div class="line">    	</div><div class="line">    	outline: 1px dotted red;</div><div class="line">    	outline-offset: 5px;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">#p2 &#123;</span></div><div class="line">    	width: 10rem;</div><div class="line">    	height: 1rem;</div><div class="line">    	border: 1px solid gray;</div><div class="line">    	</div><div class="line">    	</div><div class="line">    	/*overflow: hidden;*/</div><div class="line">    	white-space: nowrap;</div><div class="line">    	text-overflow: ellipsis;</div><div class="line">    	white-space: normal;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>4.cursor  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;p id=<span class="string">"p1"</span> style=<span class="string">"cursor:none"</span>&gt;none&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p2"</span> style=<span class="string">"cursor: context-menu;"</span>&gt;contentxt-menu&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p3"</span> style=<span class="string">"cursor: cell;"</span>&gt;cell&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p4"</span> style=<span class="string">"cursor: vertical-text;"</span>&gt;vertical-text&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p5"</span> style=<span class="string">"cursor: alias;"</span>&gt;<span class="built_in">alias</span>&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p6"</span> style=<span class="string">"cursor: copy;"</span>&gt;copy&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p7"</span> style=<span class="string">"cursor: no-drop;"</span>&gt;no-drop&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p8"</span> style=<span class="string">"cursor: not-allowed;"</span>&gt;not-allowed&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p9"</span> style=<span class="string">"cursor: nesw-resize;"</span>&gt;nesw-resize&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p10"</span> style=<span class="string">"cursor: nwse-resize;"</span>&gt;nwse-resize&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p11"</span> style=<span class="string">"cursor: col-resize;"</span>&gt;col-resize&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p12"</span> style=<span class="string">"cursor: row-resize;"</span>&gt;row-resize&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p13"</span> style=<span class="string">"cursor: all-scroll;"</span>&gt;all-scroll&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p14"</span> style=<span class="string">"cursor: zoom-in;"</span>&gt;zoom-in&lt;/p&gt;</div><div class="line">    &lt;p id=<span class="string">"p15"</span> style=<span class="string">"cursor: zoom-out;"</span>&gt;zoom-out&lt;/p&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、视口-viewport&quot;&gt;&lt;a href=&quot;#一、视口-viewport&quot; class=&quot;headerlink&quot; title=&quot;一、视口 viewport&quot;&gt;&lt;/a&gt;一、视口 viewport&lt;/h3&gt;&lt;p&gt;手机有不不同的分辨率，不不同的屏幕大小，如何使我们开
    
    </summary>
    
      <category term="移动端" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://yoursite.com/2015/07/08/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2015/07/08/Flex布局/</id>
    <published>2015-07-07T22:26:00.000Z</published>
    <updated>2017-02-09T05:44:22.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Flexible-Box-Layout"><a href="#一、Flexible-Box-Layout" class="headerlink" title="一、Flexible Box Layout"></a>一、Flexible Box Layout</h3><p>弹性布局：提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间  </p>
<h3 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h3><p>容器：采用flex布局的元素都称为容器Flex Container<br>项目：容器内所有子元素自动成为容器成员，称为项目 Flex item<br>两根轴：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.main axis(主轴) ：  </div><div class="line">    容器中水平的称为主轴，mian start 主轴的开始位置</div><div class="line">    main end主轴的结束位置</div><div class="line">    </div><div class="line">2.cross axis（交叉轴）:  </div><div class="line">    容器器中垂直的称为交叉轴,crossstart交叉轴的开始位置,cross end 交叉轴的结束位置   </div><div class="line">        </div><div class="line">项目默认按照主轴排序main size 单个项目占据的主轴空间</div><div class="line">cross size 单个项目占据的交叉轴空间</div></pre></td></tr></table></figure>
<h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><p>任何容器器都可以指定为flex布局  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">        display: flex;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>flex布局之后，子元素成为内联块元素<br>行内元素也可以使用flex布局    </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box section &#123;</div><div class="line">        display: inline-flex;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>注意 设置后，float / clear / vertical-align 将失效  </p>
<h3 id="四、容器的属性"><a href="#四、容器的属性" class="headerlink" title="四、容器的属性"></a>四、容器的属性</h3><p>1.flex-direction ：决定主轴方向   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flex-direction: row | row-reverse | column | column-reverse;  </div><div class="line">    row (默认值) 主轴为水平方向，起点在左端  </div><div class="line">    row-reverse 主轴为水平方向，起点在右端  </div><div class="line">    column 主轴为垂直方向，起点在上沿  </div><div class="line">    column-reverse 主轴为垂直方向，起点在下沿</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.flex-container &#123;</div><div class="line">        display: -webkit-flex;</div><div class="line">        display: flex;</div><div class="line">        -webkit-flex-direction: row-reverse;</div><div class="line">        flex-direction: row-reverse;</div><div class="line">        width: 400px;</div><div class="line">        height: 250px;</div><div class="line">        background-color: lightgrey;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2.flex-wrap:默认情况下，项目都排在一条线（轴线)   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">如果一条轴线排不下，flex-wrap决定该如何换行  </div><div class="line">    no-wrap (默认) 不换行  </div><div class="line">    wrap 换行，第一行在上方  </div><div class="line">    wrap-reverser换行,第一行在下方 </div><div class="line">    </div><div class="line">    .flex-container &#123;</div><div class="line">        display: -webkit-flex;</div><div class="line">        display: flex;</div><div class="line">        -webkit-flex-wrap: nowrap;</div><div class="line">        flex-wrap: nowrap;</div><div class="line">        width: 300px;</div><div class="line">        height: 250px;</div><div class="line">        background-color: lightgrey;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>3.flex-flow ：flex-flow属性是flex-direction属性和flex-wrap的简写形式类似background默认值 row no-wrap<br>4.justify-content：定义了了项目在主轴上的对齐方式   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">    值（假设主轴从左到右）</div><div class="line">    flex-start：左对齐</div><div class="line">    flex-end : 右对齐</div><div class="line">    center : 中点对齐</div><div class="line">    space-between : 两端对齐，项⽬目之间的间隔相等</div><div class="line">    space-around : 每个项目两侧的间隔相等,所以，项⽬目之间的间隔比项目</div><div class="line">    与边框的间隔大一倍</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.flex-container &#123;</div><div class="line">        display: -webkit-flex;</div><div class="line">        display: flex;</div><div class="line">        -webkit-justify-content: flex-end;</div><div class="line">        justify-content: flex-end;</div><div class="line">        width: 400px;</div><div class="line">        height: 250px;</div><div class="line">        background-color: lightgrey;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>5.align-items: 假设交叉轴从上到下  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flex-start：上对齐</div><div class="line">    flex-end ： 下对齐</div><div class="line">    center ： 中点对齐</div><div class="line">    baseline ： 项目的第一行文字的基线对齐</div><div class="line">    stretch ： 如果项目末设置高度或设置为auto，将占满整个容器的高度</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.flex-container &#123;</div><div class="line">        display: -webkit-flex;</div><div class="line">        display: flex;</div><div class="line">        -webkit-align-items: stretch;</div><div class="line">        align-items: stretch;</div><div class="line">        width: 400px;</div><div class="line">        height: 250px;</div><div class="line">        background-color: lightgrey;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>6.align-content : 定义了多根轴线的对齐方式  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">如果项目只有一根轴线，该属性不起作用</div><div class="line">    flex-start:与交叉的起点对齐</div><div class="line">    flex-end : 与交叉轴的终点对齐</div><div class="line">    center ： 与交叉轴的中点对齐</div><div class="line">    space-between : 与交叉两端对齐</div><div class="line">    space-around : 与交叉轴两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。</div><div class="line">    stretch(默认值) : 轴线占满整个交叉轴 </div><div class="line">    </div><div class="line">    .flex-container &#123;</div><div class="line">        display: -webkit-flex;</div><div class="line">        display: flex;</div><div class="line">        -webkit-flex-wrap: wrap;</div><div class="line">        flex-wrap: wrap;</div><div class="line">        -webkit-align-content: center;</div><div class="line">        align-content: center;</div><div class="line">        width: 300px;</div><div class="line">        height: 300px;</div><div class="line">        background-color: lightgrey;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="五、项目的属性"><a href="#五、项目的属性" class="headerlink" title="五、项目的属性"></a>五、项目的属性</h3><p>1.order:定义项目的排列顺序，数值越小，排列越靠前，默认为0  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.flex-item &#123;</div><div class="line">        background-color: cornflowerblue;</div><div class="line">        width: 100px;</div><div class="line">        height: 100px;</div><div class="line">        margin: 10px;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .first &#123;</div><div class="line">        -webkit-order: -1;</div><div class="line">        order: -1;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2.flex-grow : 定义项目的放大比例，默认为0， 即如果存在剩余空间，也不放大，如果所有的flex-grow属性都为1，则他们将等分剩余空间<br>如果一个项目的flex-grow属性为2，其他项目<br>都为1，则前者占据的剩余空间将比其他项多一倍  </p>
<p>3.flex-shrink : 定义了项目的缩小比例<br>默认为1 ，即如果空间不足，该项目将缩小<br>如果所有的项目flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，则其他项目都为1，则空间不足时，前者不缩小，负值对该属性无效  </p>
<p>4.flex-basis : 定义了了在分配多余空间之前，项目占据的主轴空间<br>浏览器器根据这个属性，计算主轴是否有多余空间<br>默认值为auto，即项⽬目的本来大小<br>可以设为跟width和height属性一样的值，则项目将占据固定空间   </p>
<p>5.flex / flex: flex-grow flex-shrink flex-basis</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//flex: 1 0 auto;占几份,不让缩小,</div><div class="line">    .flex-item &#123;</div><div class="line">        background-color: cornflowerblue;</div><div class="line">        margin: 10px;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .item1 &#123;</div><div class="line">        -webkit-flex: 2;</div><div class="line">        flex: 2;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .item2 &#123;</div><div class="line">        -webkit-flex: 1;</div><div class="line">        flex: 1;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .item3 &#123;</div><div class="line">        -webkit-flex: 1;</div><div class="line">        flex: 1;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>6.align-self  :<br>属性允许单个项目有与其它项目不不一样的对齐方式，可覆盖align-items属性<br>默认值auto 表示继承父元素的align-items属性，如果没有父元素，则等同于stretch<br>该属性有6个值，除了了auto，其它都与align-items属性完全一致</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.flex-item &#123;</div><div class="line">        background-color: cornflowerblue;</div><div class="line">        width: 60px;</div><div class="line">        min-height: 100px;</div><div class="line">        margin: 10px;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .item1 &#123;</div><div class="line">        -webkit-align-self: flex-start;</div><div class="line">        align-self: flex-start;</div><div class="line">    &#125;</div><div class="line">    .item2 &#123;</div><div class="line">        -webkit-align-self: flex-end;</div><div class="line">        align-self: flex-end;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .item3 &#123;</div><div class="line">        -webkit-align-self: center;</div><div class="line">        align-self: center;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .item4 &#123;</div><div class="line">        -webkit-align-self: baseline;</div><div class="line">        align-self: baseline;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    .item5 &#123;</div><div class="line">        -webkit-align-self: stretch;</div><div class="line">        align-self: stretch;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Flexible-Box-Layout&quot;&gt;&lt;a href=&quot;#一、Flexible-Box-Layout&quot; class=&quot;headerlink&quot; title=&quot;一、Flexible Box Layout&quot;&gt;&lt;/a&gt;一、Flexible Box Layout&lt;/
    
    </summary>
    
      <category term="移动端" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2015/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/06/11/设计模式/</id>
    <published>2015-06-11T02:20:56.000Z</published>
    <updated>2017-02-09T05:58:23.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、工厂模式"><a href="#一、工厂模式" class="headerlink" title="一、工厂模式"></a>一、工厂模式</h3><p>工厂模式：通过工厂函数获取想要的内容  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> creatPerson(name) &#123;</div><div class="line">    // 创造出想要的对象</div><div class="line">    var obj = &#123;&#125;;</div><div class="line">    // 给对象添加必要的数据</div><div class="line">    obj.name = name;		</div><div class="line">    // 把创建好的对象返回出去</div><div class="line">    	<span class="built_in">return</span> obj;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>// 利：简化创造对象的操作，只需要调用函数就可以获取对象<br>// 弊：无法判断出对象的归属  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var obj1 = creatPerson(<span class="string">'宁哥'</span>);</div><div class="line">    console.log(obj1 instanceof creatPerson);</div><div class="line">    console.log(obj1 instanceof Object);</div></pre></td></tr></table></figure>
<h3 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h3><p>单例模式:通过单例创建出来的对象，只初始化(实例化)一次，以后调用创建方法<br>获取到的对象永远是第一次调用所创建出来的对象 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreatePerson(name)&#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    CreatePerson.prototype.sayHi = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>1、不使用闭包，在函数内部调用内部函数<br>这样的做法不合理，因为这样还是可以每次调用这个函数创建出好多不同的对象  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var person = null;//把这个写成全局中，对代码结构不太好</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">SingalPerson</span></span>()&#123;</div><div class="line">    var person = null;</div><div class="line">    <span class="keyword">function</span> aaa(name)&#123;</div><div class="line">        <span class="keyword">if</span>(!person)&#123;</div><div class="line">            person = new CreatePerson(name);	</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        aaa(name)</div><div class="line">        console.log(person);  </div><div class="line">        //这样子<span class="built_in">return</span>出去后函数里面就没有了person了，又还需要创建</div><div class="line">        <span class="built_in">return</span> person;</div><div class="line">        console.log(person);</div><div class="line">    &#125;</div><div class="line">        var a = SingalPerson();</div><div class="line">        console.log(a);</div></pre></td></tr></table></figure>
<p>2、用闭包的方式是person被return出去后不会被销毁，一直存在内存中<br>//单例创造对象的函数  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">SingalPerson</span></span>()&#123;</div><div class="line">    var person = null;</div><div class="line">    <span class="built_in">return</span> <span class="keyword">function</span>(name)&#123;			</div><div class="line">    	<span class="keyword">if</span>(!person)&#123;</div><div class="line">    	    person = new CreatePerson(name);</div><div class="line">    	&#125;</div><div class="line">    	<span class="built_in">return</span> person;</div><div class="line">       &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>虽然可以只调用一步SingalPerson()；就可以实现单例效果，但是如果两个<br>对象分别是在函数里面创建，就需要在各自的函数里调用两次SingalPerson;<br>当然也可以把调用SingalPerson()的表达式写在全局中，这样每次创建对象<br>都可以来调用存贮SingalPerson()结果的变量，但是这样就把单例操作分<br>成了两部分，对程序的逻辑和结构方面不太好   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = SingalPerson();</div><div class="line">    var obj1 = a(<span class="string">"haha"</span>);</div><div class="line">    console.log(obj1);</div><div class="line">    //这样就可以看到单例的效果了</div><div class="line">    var obj3 = a(<span class="string">"lala"</span>);</div><div class="line">    console.log(obj3);</div><div class="line">    //如果执行两次SingalPerson()就会创建两个不同的对象</div><div class="line">    //var b = SingalPerson();</div><div class="line">    //var obj2 = b(<span class="string">"lala"</span>);</div><div class="line">    //console.log(obj2);</div></pre></td></tr></table></figure>
<p>3、使用闭包和立即执行函数实现<br>要把最外面的函数只执行一遍，就可以使用到自调用，这样就不用在外面再去定义<br>执行全局的函数，当程序执行到这行代码时就立刻执行这个函数，再用一个变量来<br>保存这个函数的结果，然后可以在外面就可以调用这个变量了，因为外面的那个函<br>数返回的就是我们不断执行的内部函数  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var aa = (<span class="keyword">function</span> <span class="function"><span class="title">SingalPerson</span></span>()&#123;</div><div class="line">    var person = null;</div><div class="line">    <span class="built_in">return</span> <span class="keyword">function</span>(name)&#123;</div><div class="line">    <span class="keyword">if</span>(!person)&#123;</div><div class="line">    	     person = new CreatePerson(name);</div><div class="line">    &#125;</div><div class="line">    	<span class="built_in">return</span> person;</div><div class="line">    &#125;</div><div class="line">    &#125;)();</div><div class="line">       var obj1 = aa(<span class="string">"haha"</span>);</div><div class="line">       console.log(obj1);</div><div class="line">    var obj2 = aa(<span class="string">"lala"</span>);</div><div class="line">       console.log(obj2);</div></pre></td></tr></table></figure>
<h3 id="三、单例模式的实例"><a href="#三、单例模式的实例" class="headerlink" title="三、单例模式的实例"></a>三、单例模式的实例</h3><p>  单例模式实现模态窗口  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var creatDiv = (<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      var div = null;</div><div class="line">    // 向外返回的函数是真正用来创建标签、拼接标签的操作</div><div class="line">         <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    // 判断标签是否存在，不存在就创建，存在就直接返回这个标签</div><div class="line">        <span class="keyword">if</span> (!div) &#123;</div><div class="line">    	   div = document.createElement(<span class="string">'div'</span>);</div><div class="line">    		    div.setAttribute(<span class="string">'style'</span>, <span class="string">'width: 100px;  </span></div><div class="line">          height:100px; border:1px solid black');</div><div class="line">          document.body.appendChild(div);	</div><div class="line">        &#125;			</div><div class="line">        	<span class="built_in">return</span> div;</div><div class="line">    &#125;</div><div class="line">    &#125;)();</div><div class="line">    // 页面加载完毕后添加点击事件  </div><div class="line">    window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        document.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="title">function</span></span> () &#123;	</div><div class="line">            var divElement = creatDiv();</div><div class="line">            divElement.style.display = <span class="string">'block'</span>;</div><div class="line">            divElement.onclick = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">            document.body.removeChild(divElement);	</div><div class="line">            divElement.style.display = <span class="string">'none'</span>;				</div><div class="line">            &#125;				</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="四、代理模式"><a href="#四、代理模式" class="headerlink" title="四、代理模式"></a>四、代理模式</h3><p>代理是一个对象，它可以用来控制对本体对象的访问，它与本体对象实现了同样的接口，代理对象会把所有的调用方法传递给本体对象的；代理模式最基本的形式是对访问进行控制，而本体对象则负责执行所分派的那个对象的函数或者类，简单的来讲本地对象注重的去执行页面上的代码，代理则控制本地对象何时被实例化，何时被使用；我们在上面的单体模式中使用过一些代理模式，就是使用代理模式实现单体模式的实例化，其他的事情就交给本体对象去处理；<br>代理两个优点：<br>1、代理对象可以代替本体被实例化，并使其可以被远程访问；<br>2、它还可以把本体实例化推迟到真正需要的时候；对于实例化比较费时的本体对象，或者因为尺寸比较大以至于不用时不适于保存在内存中的本体，我们可以推迟实例化该对象<br>第一种方案：不使用代理的预加载图片函数如下  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 不使用代理的预加载图片函数如下</div><div class="line">    var myImage = (<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var imgNode = document.createElement(<span class="string">"img"</span>);</div><div class="line">        document.body.appendChild(imgNode);</div><div class="line">        var img = new Image();</div><div class="line">        img.onload = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            imgNode.src = this.src;</div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">return</span> &#123;</div><div class="line">            <span class="built_in">set</span>Src: <span class="keyword">function</span>(src) &#123;</div><div class="line">            imgNode.src = <span class="string">"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif"</span>;</div><div class="line">            img.src = src;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div></pre></td></tr></table></figure>
<p>// 调用方式<br>myImage.setSrc(“<a href="https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png" target="_blank" rel="external">https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png</a>“);<br>第二种方案：使用代理模式来编写预加载图片的代码如下：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var myImage = (<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var imgNode = document.createElement(<span class="string">"img"</span>);</div><div class="line">        document.body.appendChild(imgNode);</div><div class="line">        <span class="built_in">return</span> &#123;</div><div class="line">            <span class="built_in">set</span>Src: <span class="keyword">function</span>(src) &#123;</div><div class="line">                imgNode.src = src;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">       &#125;)();</div><div class="line">    // 代理模式</div><div class="line">    var ProxyImage = (<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var img = new Image();</div><div class="line">        img.onload = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            myImage.setSrc(this.src);</div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">return</span> &#123;</div><div class="line">            <span class="built_in">set</span>Src: <span class="keyword">function</span>(src) &#123;   </div><div class="line">                myImage.setSrc(<span class="string">"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif"</span>);</div><div class="line">                img.src = src;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div></pre></td></tr></table></figure>
<p>// 调用方式<br>ProxyImage.setSrc(“<a href="https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png" target="_blank" rel="external">https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png</a>“);<br>第一种方案是使用一般的编码方式实现图片的预加载技术，首先创建imgNode元素，然后调用myImage.setSrc该方法的时候，先给图片一个预加载图片，当图片加载完的时候，再给img元素赋值，第二种方案是使用代理模式来实现的，myImage 函数只负责创建img元素，代理函数ProxyImage 负责给图片设置loading图片，当图片真正加载完后的话，调用myImage中的myImage.setSrc方法设置图片的路径；</p>
<p>他们之间的优缺点如下：</p>
<ol>
<li>第一种方案一般的方法代码的耦合性太高，一个函数内负责做了几件事情，比如创建img元素，和实现给未加载图片完成之前设置loading加载状态等多项事情，未满足面向对象设计原则中单一职责原则；并且当某个时候不需要代理的时候，需要从myImage 函数内把代码删掉，这样代码耦合性太高。</li>
<li>第二种方案使用代理模式，其中myImage 函数只负责做一件事，创建img元素加入到页面中，其中的加载loading图片交给代理函数ProxyImage 去做，当图片加载成功后，代理函数ProxyImage 会通知及执行myImage 函数的方法，同时当以后不需要代理对象的话，我们直接可以调用本体对象的方法即可；  </li>
</ol>
<p>从上面代理模式我们可以看到，代理模式和本体对象中有相同的方法setSrc,这样设置的话有如下2个优点：</p>
<ol>
<li>用户可以放心地请求代理，他们只关心是否能得到想要的结果。假如我门不需要代理对象的话，直接可以换成本体对象调用该方法即可。</li>
<li>在任何使用本体对象的地方都可以替换成使用代理。<br>五、观察者模式：<br>发布—订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。  </li>
</ol>
<p>发布订阅模式的优点：</p>
<ol>
<li>支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。</li>
<li><p>发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；<br>发布订阅模式的缺点：<br>创建订阅者需要消耗一定的时间和内存。<br>虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等。  </p>
<ol>
<li>首先要想好谁是发布者(比如上面的卖家)。  </li>
<li>然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者(买家收藏了卖<br>家的店铺，卖家通过收藏了该店铺的一个列表名单)。</li>
<li>最后就是发布消息，发布者遍历这个缓存列表，依次触发里面存放的订阅者回调函数。  </li>
</ol>
<p>我们还可以在回调函数里面添加一点参数  </p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var saleHouse = &#123;&#125;;//发布者</div><div class="line">       saleHouse.clientlist = [];//客户的列表</div><div class="line">       saleHouse.listen = <span class="keyword">function</span>(client)&#123;//注册被通知的客户,放入列表中</div><div class="line">       // this.clientlist.push(client);//</div><div class="line">       console.log(this.clientlist)//[]就是上面的saleHouse.clientlist</div><div class="line">            saleHouse.clientlist.push(client)</div><div class="line">       &#125;</div><div class="line">      saleHouse.trigger = <span class="function"><span class="title">function</span></span>()&#123;//发通知</div><div class="line">       <span class="keyword">for</span>(var i = 0,s;s = this.clientlist[i++];)&#123;//跟我们平时写方法相同</div><div class="line">            s.apply(this,arguments);//调用函数，有参数的情况下用apply</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      saleHouse.listen(<span class="keyword">function</span>(position,price)&#123;</div><div class="line">           console.log(<span class="string">'地点:'</span>+position+<span class="string">"价格:"</span>+price)</div><div class="line">      &#125;)</div><div class="line">           saleHouse.trigger(<span class="string">'前海湾'</span>,<span class="string">'120000'</span>)</div></pre></td></tr></table></figure>
<h3 id="六、适配器模式"><a href="#六、适配器模式" class="headerlink" title="六、适配器模式"></a>六、适配器模式</h3><p>   适配器模式：<br>将一个对象或者类的接口翻译成某个指定的系统可以使用的另外一个接口.</p>
<p>适配器基本上允许本来由于接口不兼容而不能一起正常工作的对象或者类能够在一<br>起工作.适配器将对它接口的调用翻译成对原始接口的调用，而实现这样功能的代<br>码通常是最简的。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var MyRenderMap = <span class="keyword">function</span>(service) &#123;</div><div class="line">        <span class="keyword">if</span>(service.show instanceof Function)&#123;</div><div class="line">        	service.show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // MyRenderMap(baiduMap)</div><div class="line">    // MyRenderMap(gooleMap)</div><div class="line">    //如果方法名不同的话就要用到适配器</div><div class="line">    var gooleMap = &#123;</div><div class="line">    abc:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    	console.log(<span class="string">'谷歌为你服务！'</span>)</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    var gooleMapAdapter=&#123;</div><div class="line">        show:<span class="function"><span class="title">functioun</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> gooleMap.abc()//可能有些适配器需要返回</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    MyRenderMap(gooleMapAdapter)</div></pre></td></tr></table></figure>
<p>上面的适配器也是每个不同的对象都要一个适配器（面版模式)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、工厂模式&quot;&gt;&lt;a href=&quot;#一、工厂模式&quot; class=&quot;headerlink&quot; title=&quot;一、工厂模式&quot;&gt;&lt;/a&gt;一、工厂模式&lt;/h3&gt;&lt;p&gt;工厂模式：通过工厂函数获取想要的内容  &lt;/p&gt;
&lt;figure class=&quot;highlight bash
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>RequireJs</title>
    <link href="http://yoursite.com/2015/05/08/requirejs/"/>
    <id>http://yoursite.com/2015/05/08/requirejs/</id>
    <published>2015-05-08T03:36:16.000Z</published>
    <updated>2017-02-08T07:47:56.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、传统代码的缺陷"><a href="#一、传统代码的缺陷" class="headerlink" title="一、传统代码的缺陷"></a>一、传统代码的缺陷</h3><p>传统的用script标签导入的JS文件，有可能会阻塞页面渲染，而且正常我们开发的时候会导入引入JS文件，都用script标签导入，很容易造成混乱，不容易维护</p>
<h3 id="二、什么是模块化"><a href="#二、什么是模块化" class="headerlink" title="二、什么是模块化"></a>二、什么是模块化</h3><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。 为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Node环境中，一个.js文件就称之为一个模块（module）。<br>随着网页越来越复杂，网页中引入的JS文件也就越来越多，单纯的用<script>引入js文件，已经满足不了我们的需求，我们需要团队协作，模块分离<br>模块化是指在处理某些问题时，按照一种分类或者思想对功能进行模块化管理和使用</p>
<h5 id="使用模块有什么好处？"><a href="#使用模块有什么好处？" class="headerlink" title="使用模块有什么好处？"></a>使用模块有什么好处？</h5><p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Node内置的模块和来自第三方的模块。</p>
<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>
<h3 id="三、模块化编程规范"><a href="#三、模块化编程规范" class="headerlink" title="三、模块化编程规范"></a>三、模块化编程规范</h3><p>NodeJS实现了JavaScript语言编写后台，其中使用CommonJS规范实现了模块化开发<br>模块化开发其实就是让JavaScript文件可以互相引用，每个文档代表一个模块，提高代码的使用频率。<br>在HTML中引入JS文件也会方便很多。<br>原生JavaScript中并不支持模块化开发，出现了一些规范，就是所说的AMD和CMD，这两种方式适合使用桌面端，可以进行异步加载，而在NodeJS中使用CommonJS是同步的，所以CommonJS并不适合桌面端</p>
<p>在require.js推广的过程中，产生了一种模块化规范，叫AMD</p>
<p>在sea.js推广的过程中，产生了一种模块化规范，叫CMD</p>
<p>sea.js是淘宝的前端开发工程师，网名叫玉伯的人编写的。<br>require.js而是国外朋友编写。<br>sea.js是根据CommonJS规范来编写的，和CommonJS语法类似，而require.js的写法则教特殊一些<br>四、requirejs能带来什么好处?<br>看下面的示例:<br>正常编写方式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"a.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">      &lt;span&gt;body&lt;/span&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--a.js:--&gt;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>()&#123;</div><div class="line">  alert(<span class="string">"it works"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun1();</div></pre></td></tr></table></figure>
<p>可能你更喜欢这样写</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>()&#123;</div><div class="line">      alert(<span class="string">"it works"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun1();</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p>第二种方法使用了块作用域来申明function防止污染全局变量，本质还是一样的，当运行上面两种例子时不知道你是否注意到，alert执行的时候，html内容是一片空白的，即<span>body</span>并未被显示，当点击确定后，才出现，这就是JS阻塞浏览器渲染导致的结果。<br>requirejs写法<br>当然首先要到requirejs的网站去下载js </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!--index.html:--&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"require.js"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            require([<span class="string">"a"</span>]);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">      &lt;span&gt;body&lt;/span&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!--a.js:--&gt;</div><div class="line"></div><div class="line">define(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>()&#123;</div><div class="line">      alert(<span class="string">"it works"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun1();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</script></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、传统代码的缺陷&quot;&gt;&lt;a href=&quot;#一、传统代码的缺陷&quot; class=&quot;headerlink&quot; title=&quot;一、传统代码的缺陷&quot;&gt;&lt;/a&gt;一、传统代码的缺陷&lt;/h3&gt;&lt;p&gt;传统的用script标签导入的JS文件，有可能会阻塞页面渲染，而且正常我们开发的时候
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>GulpJs</title>
    <link href="http://yoursite.com/2015/02/11/gulpjs/"/>
    <id>http://yoursite.com/2015/02/11/gulpjs/</id>
    <published>2015-02-11T02:29:16.000Z</published>
    <updated>2017-02-08T07:46:52.941Z</updated>
    
    <content type="html"><![CDATA[<p>一、安装gulp<br>1.先在全局环境下安装gulp</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure>
<p>2.生成json文件，初始化<br><img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/mqffNXf8X7hIPPI8uUlvkXZPCg4h6wuYppcNrxSMg7Y!/b/dAkBAAAAAAAA&amp;bo=QQImAQAAAAADB0Y!&amp;rf=viewer_4" alt="image">  </p>
<p>3.作为项目的开发依赖（devDependencies）安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>
<p> <img src="http://a1.qpic.cn/psb?/V11mx6TD0YZt7E/BzMarXKQz1htHk1F8elW*WiwG4XyhjhunEJsjw.r7Ps!/b/dHcBAAAAAAAA&amp;bo=QgLoAAAAAAADB4o!&amp;rf=viewer_4" alt="image"></p>
<ol>
<li>在项目根目录下创建一个名为 gulpfile.js 的文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 导入gulp模块</div><div class="line">var gulp = require(<span class="string">'gulp'</span>);</div><div class="line">// 创建一个任务，名字是default的话就是默认的任务，在终端使用gulp就会直接执行这个任务</div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  // 将你的默认的任务代码放在这</div><div class="line">  console.log(<span class="string">"这是一个默认任务！！！"</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>运行 gulp：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp</div></pre></td></tr></table></figure>
<p><img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/9jptoit9.o8Cvn33Vztvtj.jpfCd6U1lqoR*GXcRJHI!/b/dHgBAAAAAAAA&amp;bo=ngFoAAAAAAADANI!&amp;rf=viewer_4" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 导入gulp模块</div><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">// 创建一个任务，名字是default的话就是默认的任务，在终端使用gulp就会直接执行这个任务</div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">  // 将你的默认的任务代码放在这，默认的就可以直接gulp</div><div class="line">  console.log(&quot;这是一个默认任务！！！&quot;)</div><div class="line">&#125;);</div><div class="line">// 如果要执行额外的功能，就在终端输入gulp sayHello</div><div class="line">gulp.task(&quot;sayHello&quot;,function()&#123;</div><div class="line">	console.log(&quot;hello world!!!&quot;)</div><div class="line">&#125;)</div><div class="line">```bash</div><div class="line">![image](http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/Fejejzzd40pizUgvD1gzsBGXvxOCagMOAairVYULPVc!/b/dG8BAAAAAAAA&amp;bo=oAFeAAAAAAADANo!&amp;rf=viewer_4)</div><div class="line"></div><div class="line">二、gulp的一些API</div><div class="line"></div><div class="line">```bash</div><div class="line">gulp的API中文链接</div><div class="line">http://www.gulpjs.com.cn/docs/api/</div><div class="line">http://gulpjs.com/plugins/</div></pre></td></tr></table></figure></p>
<p>1、拷贝任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//拷贝任务</div><div class="line">gulp.task(<span class="string">"copy"</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	//先获取要拷贝的文件</div><div class="line">	gulp.src(<span class="string">"./src/*.html"</span>)</div><div class="line">	//通过管道进行下一步操作，是一个链式语法</div><div class="line">	//desc方法是输出文件到什么位置</div><div class="line">		.pipe(htmlmin(&#123;collapseWhitespace: <span class="literal">true</span>&#125;))</div><div class="line">		.pipe(gulp.dest(<span class="string">"./dist/"</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://a3.qpic.cn/psb?/V11mx6TD0YZt7E/mN96zsiGX3UeI0R*isudkcFVWblFlwdJt7NYotJtGfM!/b/dHwBAAAAAAAA&amp;bo=OAKRAAAAAAADAI4!&amp;rf=viewer_4" alt="image"><br>如果想要在改变文件的内容，拷贝后的文件也会自动改变<br>就要设置监听</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//监听任务</div><div class="line">gulp.task(<span class="string">"dist"</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	// 利用watch方法进行监听</div><div class="line">	// 第一个参数是监听哪个文件是否被改变</div><div class="line">	// 如果改变了就执行第二个参数里面的任务</div><div class="line">	gulp.watch(<span class="string">"./src/*.html"</span>,[<span class="string">"copy"</span>,<span class="string">"sayHello"</span>]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://a2.qpic.cn/psb?/V11mx6TD0YZt7E/8eY23fudFkR2fJqmd3TAMOHNdVW5htxyvNrQtTquFJU!/b/dHgBAAAAAAAA&amp;bo=sAGYAAAAAAADAAw!&amp;rf=viewer_4" alt="image"><br>2、less转换css</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var less = require(<span class="string">'gulp-less'</span>);</div><div class="line">// var path = require(<span class="string">'path'</span>);</div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  <span class="built_in">return</span> gulp.src(<span class="string">'./src/styles/*.less'</span>)</div><div class="line">    .pipe(less(</div><div class="line">    // &#123;</div><div class="line">    //   paths: [ path.join(__dirname, <span class="string">'less'</span>, <span class="string">'includes'</span>) ]</div><div class="line">    // &#125;</div><div class="line">    ))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果想要不断写less文件，css文件也会改变</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//监听任务</div><div class="line">gulp.task(<span class="string">"dist"</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	//监听less文件的状态</div><div class="line">	gulp.watch(<span class="string">"./src/styles/*.less"</span>,[<span class="string">"minify"</span>]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>3、压缩文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(<span class="string">'gulp'</span>);</div><div class="line">var htmlmin = require(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> gulp.src(<span class="string">'src/*.html'</span>)</div><div class="line">    .pipe(htmlmin(&#123;collapseWhitespace: <span class="literal">true</span>&#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>也可以设置监听，自动压缩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//监听任务</div><div class="line">gulp.task(<span class="string">"dist"</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	//监听less文件的状态</div><div class="line">	gulp.watch(<span class="string">"./src/styles/*.less"</span>,[<span class="string">"less"</span>]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、安装gulp&lt;br&gt;1.先在全局环境下安装gulp&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="http://yoursite.com/2014/09/08/%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2014/09/08/继承/</id>
    <published>2014-09-08T03:36:35.000Z</published>
    <updated>2017-02-09T05:53:56.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、优化字面量的方法"><a href="#一、优化字面量的方法" class="headerlink" title="一、优化字面量的方法"></a>一、优化字面量的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;</div><div class="line">        name:<span class="string">'张三'</span>,</div><div class="line">        age:24</div><div class="line">    &#125;;  </div><div class="line">    var animal=&#123;</div><div class="line">    name:<span class="string">'翠花'</span>,</div><div class="line">    age:3</div><div class="line">    &#125;;  </div><div class="line">    <span class="keyword">function</span> CreatePerson(name,age)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">    var obj2 = new CreatePerson(<span class="string">'李四'</span>,28)</div></pre></td></tr></table></figure>
<p>obj1和animal的constructor都是指向object，而obj2的constructor是指向CreatePerson的构造函数的，因为是构造函数所创建的实例  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">console.log(obj1.constructor)</div><div class="line">    console.log(animal.constructor)</div><div class="line">    console.log(obj2.constructor);</div><div class="line">      </div><div class="line">    优化字面量</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">Box</span></span>()&#123;&#125;</div></pre></td></tr></table></figure>
<p>改变原型里面的属性，覆盖了本身的prototype，就没有了constructor  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Box.prototype = &#123;</div><div class="line">        constructor:Box,</div><div class="line">        name:<span class="string">'jj'</span>,</div><div class="line">        age:22</div><div class="line">    &#125;</div><div class="line">    var person = new Box();</div><div class="line">    console.log(person)</div><div class="line">    //undefined因为对象里面的prototype不能访问</div><div class="line">    console.log(person.prototype)</div><div class="line">    console.log(Box.prototype)</div><div class="line">    console.log(person.constructor)</div></pre></td></tr></table></figure>
<h3 id="二、原型"><a href="#二、原型" class="headerlink" title="二、原型"></a>二、原型</h3><p>什么是原型？<br>原被型是当构造函数被调由系统用时创把建出来的一个实例，我们可以利用原型这个实例把对象中相同的属性和方法添加到原型中，达到节约内存的目的。<br>如何获取到原型？<br>在构造函数中有一个“prototype”的属性，该属性就指向了构造函数的原型，函数名.prototype<br>prototype属性：通过这个属性能获取到对应的原型.  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreatePreson(name,age,gender)&#123;</div><div class="line">    this.name = name;</div><div class="line">    this.age = age;</div><div class="line">    CreatePreson.prototype.gender = gender;</div><div class="line">        CreatePreson.prototype.sayBye = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        	console.log(<span class="string">'bye'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    //通过函数名下的prototype属性获取函数原型</div><div class="line">    CreatePreson.prototype.sayHi = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    	console.log(<span class="string">'hi'</span>)</div><div class="line">    &#125;</div><div class="line">    //创建对象，并调用原型方法</div><div class="line">    var per1 = new CreatePreson(<span class="string">'jio'</span>,22,<span class="string">'man'</span>)</div></pre></td></tr></table></figure>
<p>因为该方法并不是实例方法,所以实例调用这个方式时，在实例中找不到，就再进入实例<br>的原型中寻找，找到就执行。<br>对象如何获取它的原型:每个对象都有一个<strong>proto</strong>属性，该属性就指向了对象对应的原型，但是该属性我们  无法访问。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">console.log(per1.__proto__)</div><div class="line">    console.log(CreatePreson.__proto__)</div><div class="line">    per1.sayHi();</div><div class="line">    per1.sayBye();</div><div class="line">    console.log(per1.gender)</div><div class="line">    //constructor :原型下的属性，可以通过该属性获取到原型对应的构造函数  </div><div class="line">    console.log(CreatePreson.prototype.constructor)</div></pre></td></tr></table></figure>
<h3 id="三、通过构造函数创建对象方法的二次优化"><a href="#三、通过构造函数创建对象方法的二次优化" class="headerlink" title="三、通过构造函数创建对象方法的二次优化"></a>三、通过构造函数创建对象方法的二次优化</h3><p>把拥有相同值的属性，方法添加到原型中，把不同的属性和方法添加到各自的对象中  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreateAnimal(name,age)&#123;</div><div class="line">     //因为动物的名字和年龄各不相同，所以把这两个属性添加到对象中</div><div class="line">    	this.name = name;</div><div class="line">    	this.age = age;</div><div class="line">     //因为动物都有吃东西的方法，所以可以放到原型中</div><div class="line">    	CreateAnimal.prototype.eat = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    		console.log(<span class="string">'吃东西'</span>)</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="四、通过构造函数创建对象方法的三次优化"><a href="#四、通过构造函数创建对象方法的三次优化" class="headerlink" title="四、通过构造函数创建对象方法的三次优化"></a>四、通过构造函数创建对象方法的三次优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreatePerson(name,age)&#123;</div><div class="line">    	this.name = name;</div><div class="line">    	this.age = age;</div><div class="line">    //每次调用都会在在原型里面创建一次，很累赘。所以用<span class="keyword">if</span>来判断，如果原型里面  </div><div class="line">    //有该方法，就不用再往原型里面放了因为每个对象的方法都是相同，所以我们可  </div><div class="line">    //以把相同的方法添加到原型里传统添加方式：每次调用都会给原型添加一次方法</div><div class="line">    //优化方法：判断原型中是否已经存在要添加的方法，如果没有就添加，否则不添加。</div><div class="line">    <span class="keyword">if</span>(typeof(CreatePerson.prototype.sayHi) != <span class="string">'function'</span>)&#123;</div><div class="line">    		console.log(<span class="string">'我被执行了'</span>)</div><div class="line">    		CreatePerson.prototype.sayHi = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    			console.log(<span class="string">'hello'</span>+this.name)</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>   写在外面不太合理的原因，是因为程序由上到下执行，对象还没有调用，就已经把方<br>法添加到了原型中，有可能用不到方法  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CreatePerson.prototype.sayHi = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    	console.log(<span class="string">'hello'</span>)</div><div class="line">    &#125;</div><div class="line">    var per1 = new CreatePerson(<span class="string">'李四'</span>,22)</div><div class="line">    per1.sayHi();</div><div class="line">    var per2 = new CreatePerson(<span class="string">'向三'</span>,11)</div><div class="line">    per2.sayHi();</div></pre></td></tr></table></figure>
<h3 id="五、原型操作"><a href="#五、原型操作" class="headerlink" title="五、原型操作"></a>五、原型操作</h3><p>定义一个是构造函数，有一个实例属性：name，有一个原型属性age  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreatePerson(name,age)&#123;</div><div class="line">    	this.name = name;</div><div class="line">    	CreatePerson.prototype.age=age;</div><div class="line">    &#125;</div><div class="line">        //调用构造函数创建对象</div><div class="line">        var per1 = new CreatePerson(<span class="string">'jio'</span>,22);</div><div class="line">        console.log(per1);</div><div class="line">        console.log(per1.age)</div><div class="line">        var per2 = new CreatePerson(<span class="string">'margi'</span>,18);</div><div class="line">        //原型修改会被提升，所以上面打印就是console.log(per1)的__proto__中就可以看到.</div><div class="line">        console.log(per1);</div><div class="line">        console.log(per2);</div><div class="line">        console.log(per1.age)</div><div class="line">        //定义一个是构造函数，有一个实例属性：name，有一个原型属性age</div><div class="line">    <span class="keyword">function</span> CreatePerson (name) &#123;</div><div class="line">    	this.name = name;	</div><div class="line">    	CreatePerson.prototype.age = 18;</div><div class="line">    &#125;		</div><div class="line">     //调用构造函数创建对象  </div><div class="line">    var per1 = new CreatePerson(<span class="string">'宁哥'</span>);</div><div class="line">    var per2 = new CreatePerson(<span class="string">'凯哥'</span>);	</div><div class="line">    //<span class="keyword">in</span>操作符，只能判断对象中有没有该属性，无法判断属性是实例属性还是原型属性</div><div class="line">    console.log(<span class="string">'name'</span> <span class="keyword">in</span> per1);//<span class="literal">true</span></div><div class="line">    console.log(<span class="string">'age'</span> <span class="keyword">in</span> per1);//<span class="literal">true</span>	</div><div class="line">    //hasOwnProperty方法：判断属性是否是对象的实例属性，是则返回<span class="literal">true</span>，不是或没有该属性，返回<span class="literal">false</span>。</div><div class="line">    console.log(per1.hasOwnProperty(<span class="string">'name'</span>));//<span class="literal">true</span></div><div class="line">    console.log(per1.hasOwnProperty(<span class="string">'age'</span>));//<span class="literal">false</span></div></pre></td></tr></table></figure>
<p>判断属性是否是原型属性  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">1、判断指定的字符串是对象下的属性</div><div class="line">        <span class="keyword">if</span> (<span class="string">'age'</span> <span class="keyword">in</span> per1) &#123;</div><div class="line">    2、判断属性是否是原型属性:对hasOwnProperty取反</div><div class="line">            <span class="keyword">if</span> (!per1.hasOwnProperty(<span class="string">'age'</span>)) &#123;</div><div class="line">            	console.log(<span class="string">'原型属性'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    简化操作</div><div class="line">        <span class="keyword">if</span> (<span class="string">'age'</span> <span class="keyword">in</span> per1 &amp;&amp; !per1.hasOwnProperty(<span class="string">'age'</span>)) &#123;</div><div class="line">        	console.log(<span class="string">'原型属性'</span>);</div><div class="line">        &#125;</div><div class="line">    深度简化</div><div class="line">        CreatePerson.prototype.hello = <span class="keyword">function</span> hello (proto) &#123;</div><div class="line">            <span class="keyword">if</span> (proto <span class="keyword">in</span> this &amp;&amp; !this.hasOwnProperty(proto)) &#123;</div><div class="line">            		console.log(<span class="string">'原型属性'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;	</div><div class="line">         per1.hello(<span class="string">'age'</span>);</div></pre></td></tr></table></figure>
<h3 id="六、call和apply"><a href="#六、call和apply" class="headerlink" title="六、call和apply"></a>六、call和apply</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> sayHi(name1,name2)&#123;</div><div class="line">    	console.log(name1+<span class="string">' '</span>+name2+<span class="string">'  hahah'</span>);</div><div class="line">    	console.log(this)</div><div class="line">    	console.log(name)</div><div class="line">    &#125;</div><div class="line">	sayHi();</div><div class="line">	sayHi.call();//call方法就是用来调用函数的</div><div class="line">	//第一个参数是可以改变this的指向，</div><div class="line">	//sayHi.call(Object);</div><div class="line">	//sayHi.call(Array);</div><div class="line">	//第二个参数是函数需要的参数</div><div class="line">	//sayHi.call(Object);</div><div class="line">	//sayHi.call(Array,<span class="string">'jj'</span>);</div><div class="line">	sayHi.call(null,<span class="string">'jj'</span>,<span class="string">'hh'</span>);//指向window</div><div class="line">	//apply第二个参数必须是数组类型的</div><div class="line">	sayHi.apply(Array,[<span class="string">'jj'</span>,<span class="string">'hh'</span>])</div></pre></td></tr></table></figure>
<p>总结<br>    我们既可以使用”()”来调用函数，也可以使用call方法来调用函数<br>    使用call调用执行函数，该方法需要有两大类的参数<br>    第一大类参数是：用来修改要执行的函数中的this指针的指向<br>    第二大类参数是：要执行函数所需要的参数</p>
<h3 id="七、call和apply的继承"><a href="#七、call和apply的继承" class="headerlink" title="七、call和apply的继承"></a>七、call和apply的继承</h3><p>创建出第一个函数（父函数\父类）  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreateAnimal (name, age) &#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		this.sayHi = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">			alert(<span class="string">'hello'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>创建第二个函数：这个函数获取到的对象也有第一个函数中的属性和方法，我们可<br>以将这些相同的属性和方法从第一个函数中获取到，这样第二个函数就不必单独再<br>写一次赋值操作。</p>
<p>因为第二个函数从第一个函数中拿到了全部属性、方法则我们认为第二个函数是第<br>一个函数的子类。</p>
<p>通过call 方法实现继承：修改第一个函数中this的指向，改为person对象，<br>这样在执行第一个函数时，就给person对象添加了属性和方法  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreatePerson (name, age) &#123;</div><div class="line">    	利用call调用执行第一个函数，并修改他的指针指向为person</div><div class="line">    	CreateAnimal.call(this, name, age);</div><div class="line">    	添加本函数独有的属性和方法</div><div class="line">    	this.sayBye = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    		alert(<span class="string">'bye-bye'</span>);</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="八、原型继承"><a href="#八、原型继承" class="headerlink" title="八、原型继承"></a>八、原型继承</h3><p>父函数  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreateAnimal (name,age) &#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		this.sayHi = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">			alert(<span class="string">'hello'</span>);</div><div class="line">		&#125;;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>  子函数  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreatePerson (gender) &#123;</div><div class="line">		this.gender = gender;</div><div class="line">		this.sayBye = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			alert(<span class="string">'bye'</span>);</div><div class="line">		&#125;;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>  1、创建一个父类的对象，把这个对象当做子类的原型  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CreatePerson.prototype = new CreateAnimal(<span class="string">'宁哥'</span>, 24);</div></pre></td></tr></table></figure>
<p>  2、因为此时子类原型中的constructor指向的是父类构造函数，所以创建出的对象也<br>  将指向Animal这个函数。为了让constructor的指向正确，需要修改Person原型中的constructor   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CreatePerson.prototype.constructor = CreatePerson;</div></pre></td></tr></table></figure>
<p>  3、创建并使用子类对象  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var per = new CreatePerson(<span class="string">'男'</span>);</div><div class="line">     console.log(per.name);</div><div class="line">     console.log(per.age);</div><div class="line">     console.log(per.gender);</div></pre></td></tr></table></figure>
<h3 id="九、组合继承"><a href="#九、组合继承" class="headerlink" title="九、组合继承"></a>九、组合继承</h3><p>父类函数:属性保存在实例中，方法保存在原型中  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreateAnimal(name,age)&#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		CreateAnimal.prototype.sayHi = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			console.log(<span class="string">'hello'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>子类函数:通过call继承实例相关  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> CreatePerson(name,age,gender)&#123;</div><div class="line">    //使用call从父类继承属性和方法只是this的指向的问题，把父类中的this强变成子类中的this，也就是子类的对象，而sayHi方法不是在this上，而是在原型上</div><div class="line">     CreateAnimal.apply(this,arguments)</div><div class="line">    	this.gender = gender;</div><div class="line">    	CreateAnimal.prototype.sayBye = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    		console.log(<span class="string">'bye'</span>);</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>因为父类有添加在原型中方法，通过call获取不到，所以需要使用原型来获取这<br>些方法<br>因为只是想获取到父类的原型方法，所以不需要给父类的属性传参  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CreatePerson.prototype = new CreateAnimal();</div><div class="line">    	把子类的constructor属性改回来</div><div class="line">    CreatePerson.prototype.constructor = CreatePerson</div><div class="line">    	var person= new CreatePerson(<span class="string">'jj'</span>,22,<span class="string">'man'</span>);</div><div class="line">    	console.log(person.name)</div><div class="line">    	console.log(person.age)</div><div class="line">    	console.log(person.gender)</div><div class="line">    	person.sayHi();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、优化字面量的方法&quot;&gt;&lt;a href=&quot;#一、优化字面量的方法&quot; class=&quot;headerlink&quot; title=&quot;一、优化字面量的方法&quot;&gt;&lt;/a&gt;一、优化字面量的方法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>border-radius边框详解</title>
    <link href="http://yoursite.com/2014/01/08/border-radius%E8%BE%B9%E6%A1%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2014/01/08/border-radius边框详解/</id>
    <published>2014-01-08T02:46:16.000Z</published>
    <updated>2017-02-09T05:40:40.833Z</updated>
    
    <content type="html"><![CDATA[<p>传统的圆角生成方案，必须使用多张图片作为背景图案。CSS3的出现，使得我们再也不必浪费时间去制作这些图片了，只需要border-radius属性，支持浏览器IE 9、Opera 10.5、Safari 5、Chrome 4和Firefox 4</p>
<h3 id="一、border-radius属性"><a href="#一、border-radius属性" class="headerlink" title="一、border-radius属性"></a>一、border-radius属性</h3><p> CSS3圆角只需设置一个属性：border-radius（含义是”边框半径”）。你为这个属性提供一个值，就能同时设置四个圆角的半径。所有合法的CSS度量值都可以使用：em、px、百分比等等。<br>比如,下面是一个div方框（宽高都是200，背景为红色，边框为2px solid #000）<br><img src="http://img1.ph.126.net/veZnWtP9U6aBHjdpxSfk1A==/3773735012859876952.png" alt="image"><br> 现在设置它的圆角半径为50px,即：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border-radius:50px;</div></pre></td></tr></table></figure>
<p><img src="http://img1.ph.126.net/Gzr9zFeehRoV0H4u4HUpaQ==/3239214032086704178.png" alt="image"><br>这条语句同时将每个圆角的”水平半径”和”垂直半径”都设置为50px    </p>
<p>border-radius可以同时设置1到4个值。（想想我们之前的margin与padding）如果设置1个值，表示4个圆角都使用这个值。如果设置两个值，表示左上角和右下角使用第一个值，右上角和左下角使用第二个值。如果设置三个值，表示左上角使用第一个值，右上角和左下角使用第二个值，右下角使用第三个值。如果设置四个值，则依次对应左上角、右上角、右下角、左下角（顺时针顺序）。<br>例如：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">border-radius:50px 25px;   </div><div class="line">//表示左上角和右下角使用第一个值，右上角和左下角使用第二个值</div></pre></td></tr></table></figure>
<p><img src="http://img0.ph.126.net/j78DebB54EEAb95ptGZBbw==/828380856559913796.png" alt="image"></p>
<pre><code>border-radius:25px 10px 50px;  
//左上角使用第一个值，右上角和左下角使用第二个值，右下角使用第三个值
</code></pre><p><img src="http://img2.ph.126.net/L2ZnLlmTHBVzDEjXHdSwUA==/6599301775261760201.png" alt="image"></p>
<p>  border-radius还可以用斜杠设置第二组值。这时，第一组值表示水平半径，第二组值表示垂直半径。第二组值也可以同时设置1到4个值，应用规则与第一组值相同。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border-radius:50px/25px;</div></pre></td></tr></table></figure>
<p><img src="http://img2.ph.126.net/arUokomWDE6l8ksUR2sEdQ==/2669790154200894092.png" alt="image"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border-radius: 100px 25px 80px 5px / 45px 25px 30px 15px;</div></pre></td></tr></table></figure>
<p><img src="http://img0.ph.126.net/_CYRDxUUug2D5FR4zbyfpA==/6608260596004403904.png" alt="image"></p>
<h3 id="二、单个圆角的设置"><a href="#二、单个圆角的设置" class="headerlink" title="二、单个圆角的设置"></a>二、单个圆角的设置</h3><p>  除了同时设置四个圆角以外，还可以单独对每个角进行设置。对应四个角，CSS3提供四个单独的属性：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">* border-top-left-radius  </div><div class="line">　　</div><div class="line">* border-top-right-radius  </div><div class="line">　　</div><div class="line">* border-bottom-right-radius  </div><div class="line">　　 </div><div class="line">* border-bottom-left-radius</div></pre></td></tr></table></figure>
<p>　　<br>这四个属性都可以同时设置1到2个值。如果设置1个值，表示水平半径与垂直半径相等。如果设置2个值，第一个值表示水平半径，第二个值表示垂直半径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border-top-left-radius: 50px;</div></pre></td></tr></table></figure></p>
<p><img src="http://img0.ph.126.net/DhZRT3pksKmSexyRbGtHzw==/851743279626661653.png" alt="image">  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">border-top-left-radius: 50px 100px;</div><div class="line">//第一个值表示水平半径，第二个值表示垂直半径。</div></pre></td></tr></table></figure>
<p><img src="http://img0.ph.126.net/nwB6Qv16-Ke_4d7P5D22LA==/6608518981236074757.png" alt="image"></p>
<h3 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h3><p><img src="http://img1.ph.126.net/BwKtazTaceOkg7LVn57hwQ==/6608503588073286910.png" alt="image">  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">width:0;</div><div class="line">    </div><div class="line">height:0;</div><div class="line"></div><div class="line">border:100px solid gray;</div><div class="line"></div><div class="line">border-radius:100px;</div><div class="line"></div><div class="line">border-right-color:<span class="comment">#fff;</span></div></pre></td></tr></table></figure>
<p><img src="http://img1.ph.126.net/M3a850eYPDqe4IRVAxgOQQ==/6608548668050025589.png" alt="image">  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">height:100px;</div><div class="line"></div><div class="line">width:200px;</div><div class="line"></div><div class="line">background: red;</div><div class="line"></div><div class="line">border-radius:100px/50px;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传统的圆角生成方案，必须使用多张图片作为背景图案。CSS3的出现，使得我们再也不必浪费时间去制作这些图片了，只需要border-radius属性，支持浏览器IE 9、Opera 10.5、Safari 5、Chrome 4和Firefox 4&lt;/p&gt;
&lt;h3 id=&quot;一、b
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
</feed>
